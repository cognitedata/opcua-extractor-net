# Template for the config file,
# Defaults to config.yml in ./config.
# The config tool defaults to config/config.config-tool.yml, and uses the same config 
# options, though only EndpointURL and if needed username/password/secure are required.
# The values here are generally the default values, except for the contents of lists etc.
# Your config file can contain only a subset of these config options. Any extra options will
# cause the extractor to fail.

# This is a minimal example configuration for meaningful extraction from OPC-UA to CDF.
# It is recommended to run the config-tool in order to configure the extractor to
# extract all relevant information.

# By default this will extract the OPC-UA node hierarchy to the CDF asset hierarchy
# and stream live data to timeseries. With proper configuration the extractor can
# read string timeseries, events and historical data.

# Version of the config schema
version: 1

source:
    # The URL of the OPC-UA server to connect to
    endpoint-url: "opc.tcp://localhost:4840"

cognite:
    # The project to connect to in the API, uses the environment variable COGNITE_PROJECT.
    project: "${COGNITE_PROJECT}"
    # Cognite service url, for example `api.cognitedata.com`, or `westeurope-1.cognitedata.com`
    host: "${COGNITE_HOST}"
    # If this is set to true, credentials can be left out, and the extractor
    # will read data without pushing it to CDF.
    debug: false

    # This is for microsoft as IdP, to use a different provider,
    # set implementation: Basic, and use token-url instead of tenant.
    # See the example config for the full list of options.
    idp-authentication:
        # Directory tenant
        tenant: ${COGNITE_TENANT_ID}
        # Application Id
        client-id: ${COGNITE_CLIENT_ID}
        # Client secret
        secret: ${COGNITE_CLIENT_SECRET}
        # List of resource scopes, ex:
        # scopes:
        #   - scopeA
        #   - scopeB
        scopes:
          - ${COGNITE_SCOPE}

extraction:
    # Global prefix for externalId in destinations. Should be unique to prevent name conflicts.
    id-prefix: "gp:"
    # Map OPC-UA namespaces to prefixes in CDF. If not mapped, the full namespace URI is used.
    # Saves space compared to using the full URL. Using the ns index is not safe as the order can change on the server.
    # It is recommended to set this before extracting the node hierarchy.
    # For example:
    # namespace-map:
    #   "urn:cognite:net:server": cns
    #   "urn:freeopcua:python:server": fps
    #   "http://examples.freeopcua.github.io": efg

    # Configuration for ingesting status codes to CDF timeseries.
    status-codes:
        # Which data points to ingest to CDF.
        # `All` ingests all datapoints, including bad.
        # `Uncertain` ingests good and uncertain data points.
        # `GoodOnly` ingest only good datapoints.
        status-codes-to-ingest: All
        ingest-status-codes: true

# MQTT pusher configuration with new transmission strategy metadata
mqtt:
    host: localhost
    port: 1883
    use-grpc: false  # Use JSON format to see metadata
    json-format-type: Subscription  # Format that supports rich metadata
    include-metadata: true
    
    # New nested transmission strategy configuration
    mqtt-transmission-strategy:
        # Choose strategy based on your use case:
        data-group-by: ROOT_NODE_BASED  # Options: ROOT_NODE_BASED, CHUNK_BASED, TAG_LIST_BASED, TAG_CHANGE_BASED
        
        # For TAG_LIST_BASED strategy with custom names (NEW FORMAT):
        # data-group-by: TAG_LIST_BASED
        # tag-list-groups:
        #   - tag-list-name: "sensors_group"    # Custom name in metadata
        #     tags:
        #       - "s=S.A.Tag1"
        #       - "s=S.A.Tag2"
        #       - "s=S.A.Tag3"
        #   - tag-list-name: "pumps_group"      # Another custom name
        #     tags:
        #       - "s=S.B.Pump1"
        #       - "s=S.B.Pump2"
        
        # For TAG_LIST_BASED strategy (LEGACY FORMAT):
        # data-group-by: TAG_LIST_BASED
        # tag-lists:
        #   - ["sensor1", "sensor2", "sensor3"]  # Group 1: metadata will include "tag_list_name": "tag_list_1"
        #   - ["pump1", "pump2"]                 # Group 2: metadata will include "tag_list_name": "tag_list_2"

# Metadata examples based on transmission strategy:
# 
# ROOT_NODE_BASED strategy metadata:
# {
#   "metadata": {
#     "data_ingest_type": "subscription",
#     "message_timestamp": 1648234567890,
#     "root_node_name": "kepkeps=S.D"
#   },
#   "tags_data": [...]
# }
#
# CHUNK_BASED strategy metadata:
# {
#   "metadata": {
#     "data_ingest_type": "subscription", 
#     "message_timestamp": 1648234567890,
#     "chunk_id": "chunk_123_456_1648234567890"
#   },
#   "tags_data": [...]
# }
#
# TAG_LIST_BASED strategy metadata:
# {
#   "metadata": {
#     "data_ingest_type": "subscription",
#     "message_timestamp": 1648234567890,
#     "tag_list_name": "sensors_group"
#   },
#   "tags_data": [
#     {
#       "tag": "s=S.A.Tag1",
#       "data": [
#         {
#           "timestamp": 1648234567890,
#           "value": 124,
#           "sc": 0,
#           "dt": "int32"
#         }
#       ]
#     },
#     {
#       "tag": "s=S.A.Tag2", 
#       "data": [
#         {
#           "timestamp": 1648234567890,
#           "value": "test",
#           "sc": 0,
#           "dt": "string"
#         }
#       ]
#     }
#   ]
# }