# Template for the config file,
# Defaults to config.yml in ./config.
# The values here are generally the default values, except for the contents of lists etc.
# Your config file can contain only a subset of these config options. Any extra options will
# cause the extractor to fail.
Source:
    # The URL of the OPC-UA server to connect to
    EndpointURL: opc.tcp://localhost:4840
    # Auto accept connections from unknown servers.
    # There is not yet a feature to accept new certificates, but you can manually move rejected certificates to accepted.
    # Paths are defined in opc.ua.net.extractor.Config.xml
    AutoAccept: false
    # Polling interval in ms between each test of changes to a subscribed variable
    # 0 updates at maximum rate set by server
    PollingInterval: 500
    # OPC-UA username, leave blank for anonymous user. (no authentication)
    Username:
    # OPC-UA password
    Password:
    # Use secured connection
    Secure: false
    # Granularity to use when doing historyRead, in seconds. Nodes with last known timestamp within this range of eachother will
    # be read together. Should not be smaller than usual average update rate
    # Leave at 0 to always read a single node each time.
    HistoryGranularity: 900
    # If true, force restart the uaclient on disconnect. Required for some servers
    ForceRestart: false
    # Max sizes of various requests to OPC-UA. Defaults are usually okay, but some servers may fail with too large request sizes
    # Maximum number of results per browse or browseNext operation
    BrowseChunk: 1000
    #Max number of nodes to browse at the same time. Higher is much faster, but may be restricted by the server.
    BrowseNodesChunk: 1000
    # Enable/disable history synchronization from the OPC-UA server to CDF:
    History: true
    # Number of datapoints per request, 0 for server specified
    HistoryReadChunk: 1000
    # Max number of simultaneous nodes per historyRead request
    HistoryReadNodesChunk: 100
    AttributesChunk: 1000
    SubscriptionChunk: 1000

# List of pushers, the type must be identified using a Yaml tag. Each element results in a pusher, so it is possible
# to push multiple times to the same system, for example in order to push to multiple projects in CDF.
# List of accepted tags:
# - !cdf, A pusher for CDF.
# - !influx, Pusher for InfluxDB
Pushers:
    - !cdf
        # The project to connect to in the API
        Project:
	    # Cognite api key
        ApiKey:
        # Cognite service url
        Host: "https://api.cognitedata.com"
        # Delay in ms between each push of data points to target
        DataPushDelay: 1000
        # Debug mode, if true, Extractor will not push to target
        Debug: false
        # Buffer non-historizing datapoints when the connection to CDF fails.
        BufferOnFailure: false
        # Buffer file path
        BufferFile: buffer.bin
        # Chunk sizes in CDF requests
        LatestChunk: 100
        TimeSeriesChunk: 1000
        AssetChunk: 1000

    - !influx
        # Host URI, ex localhost:8086
        Host:
        # Influx username
        Username:
        # Influx password
        Password:
        # Database to connect to, will not be created automatically
        Database:
        # Delay in ms between each push of data points to target
        DataPushDelay: 1000
        # Debug mode, if true, Extractor will not push to target
        Debug:
        # Max number of points to send in each request to influx
        PointChunkSize: 100000

Logging:
    # Log levels: 'verbose', 'debug', 'information', 'warning', 'error', 'fatal'.
    # Writes log events at this level to the Console. 
    # If not present, or if the level is invalid, Console is not used. 
    ConsoleLevel: information
    # Writes log events at this level to a file. Logs will roll over to new files daily.
    # If not present, or if the level is invalid, logging to file is disabled.
    FileLevel:
    # Folder for logging output. If not present, logging to file is disabled.
    LogFolder:
    # Maximum number of logs files that are kept in the log folder.
    RetentionLimit: 31
    # File containing the credentials used for authentication with GCP.
    # If present, sends log events Stackdriver.
    # Events at all levels are sent.
    StackdriverCredentials:
    # Name to be assigned to the Stackdriver log.
    StackdriverLogName:

Metrics:
    # Leave host or job blank to disable metrics
    # URL of prometheus host, ex my.prometheus.server gives final endpoint my.prometheus.server/metrics/jobs/myjob, 
    URL:
    # Job tag value
    Job:
    # Prometheus username
    Username:
    # Prometheus password
    Password:
    # Time in ms between each push
    PushInterval: 1000
    # Instance tag for prometheus
    Instance:

Extraction:
    # Global prefix for externalId towards pushers. Should be unique to prevent name conflicts in the push destinations.
    # The externalId is: IdPrefix + NamespaceMap[nodeId.NamespaceUri] + nodeId.Identifier
    IdPrefix: "gp:"
    
    # Specify prefixes on DisplayName to ignore.
    IgnoreNamePrefix:
        # -prefix1
    
    # Specify specific DisplayNames to ignore.
    IgnoreName:
        # -name1
    
    # List of NodeIds corresponding to DataTypes that should be ignored.
    IgnoreDataTypes:
        # - NamespaceUri:
        #	NodeId:
    
    # Maximum size of array variables. Only arrays with the ArrayDimensions property in opc-ua specified will be used,
    # leave at 0 to only allow scalar values.
    # Note that some server implementations have issues with the ArrayDimensions property, so it is not fetched at all if MaxArraySize is 0
    MaxArraySize: 0
    
    # Set to true to allow fetching string variables. This means that all variables with non-numeric type is converted to string in some way.
    AllowStringVariables: false
    
    # Source node in the OPC-UA server. Leave empty to use the top level Objects node.
    RootNode:
        # Full name of the namespace of the root node.
        NamespaceUri:
        # Id of the root node, on the form "i=123" or "s=stringid" etc.
        NodeId:

    # Override mappings between OPC UA node id and externalId, allowing e.g. the RootNode to be mapped to
    # a particular asset in CDF. Applies to both assets and time series.
    # NodeMap:
    #   "externalId": { NamespaceUri: "uri", NodeId: "i=123" }
    NodeMap:
  
    # Map OPC-UA namespaces to prefixes in CDF. If not mapped, the full namespace URI is used.
    # Saves space compared to using the full URL. Using the ns index is not safe as the order can change on the server.
    # For example:
    # NamespaceMap:
    #   "urn:cognite:net:server": cns
    #   "urn:freeopcua:python:server": fps
    #   "http://examples.freeopcua.github.io": efg
    NamespaceMap:

    # Add custom numeric types using their nodeId. IsStep indicates whether the datatype is discrete.
    # This also overwrite default behavior, so it is possible to make Integer discrete, etc.
    # Note that the type in question needs to have a sensible numerical conversion in C#, unless it is an array type or similar, 
    # in which case each element needs a conversion
    CustomNumericTypes:
    #    - NodeId: 
    #          NamespaceUri:
    #          NodeId:
    #      IsStep: false
    # Replace all instances of NaN or Infinity with this floating point number. If left empty, ignore instead.
    NonFiniteReplacement:
    # The earliest timestamp to be read from history on the OPC-UA server, in milliseconds since 1/1/1970.
    HistoryStartTime: 0


Events:
    # Event ids to map, with full namespace-uri, and node identifier on the form "i=123"
    # Custom events must be subtypes of the BaseEventType.
    EventIds:
        #-   NamespaceUri:
        #    NodeId:
    # Id of nodes to be observed as event emitters. Empty Namespace/NodeId defaults to the server node.
    EmitterIds:
        #-   NamespaceUri:
        #    NodeId:
    # List of BrowseName for properties to be excluded from automatic mapping to destination metadata.
    # All event properties are read, by default only "Time" and "Severity" are used from the base event.
    # Be aware that a maximum of 16 metadata entries are allowed in CDF.
    ExcludeProperties:
        #- Property1
        #- Property2
    # Map source browse names to other values in the destination. For CDF, internal properties may be overwritten, by default
    # "Message" is mapped to description, "SourceNode" is used for context and "EventType" is used for type. These may also be excluded or replaced by 
    # overrides in DestinationNameMap. If multiple properties are mapped to the same value, the first non-null is used.

    # If "StartTime", "EndTime" or "SubType" are specified, either directly or through the map, these are used as event properties instead of metadata.
    # StartTime and EndTime should be either DateTime, or a number corresponding to the number of milliseconds since January 1 1970.
    # If no StartTime or EndTime are specified, both are set to the "Time" property of BaseEventType.
    # "Type" may be overriden case-by-case using "NameOverrides" in Extraction configuration, or in a dynamic way here. If no "Type" is specified,
    # it is generated from Event NodeId in the same way ExternalIds are generated for normal nodes.
    DestinationNameMap:
        #Property1: SubType
    # Emitters that should be read for historical events. Leave empty to disable history read of events.
    HistorizingEmitterIds:
        #-   NamespaceUri:
        #    NodeId:
    # Attribute to use for filtering history read. The last time read is stored locally, in latest.bin, and only events received by the server after this time are history read.
    # This should be the browsename of the attribute that stores the local server time when an event is received. One of "ReceiveTime", "Time", "LocalTime".
    # Leave empty to always read the full history on startup. (This might be slow if there is a lot of history).
    ReceiveTimeProperty: "ReceiveTime"
    # Max number of events per history read operation.
    HistoryReadChunk: 1000
