# Template for the config file,
# Defaults to config.yml in ./config.
# The config tool defaults to config/config.config-tool.yml, and uses the same config 
# options, though only EndpointURL and if needed username/password/secure are required.
# The values here are generally the default values, except for the contents of lists etc.
# Your config file can contain only a subset of these config options. Any extra options will
# cause the extractor to fail.

# This is a minimal example configuration for meaningful extraction from OPC-UA to CDF.
# It is recommended to run the config-tool in order to configure the extractor to
# extract all relevant information.

# By default this will extract the OPC-UA node hierarchy to the CDF asset hierarchy
# and stream live data to timeseries. With proper configuration the extractor can
# read string timeseries, events and historical data.

# Version of the config schema
version: 1

source:
    # KEPServer의 OPC-UA 엔드포인트 URL을 실제 주소로 변경
    endpoint-url: "opc.tcp://192.168.11.46:49320"  # KEPServer의 실제 IP와 포트로 변경
    # Publishing interval을 100ms로 설정하여 지연 최소화
    publishing-interval: 1000
    browse-nodes-chunk: 1
    browse-chunk: 1000


extraction:
    # Global prefix for externalId towards pushers. Should be unique to prevent name conflicts in the push destinations.
    # The externalId is: IdPrefix + NamespaceMap[nodeId.NamespaceUri] + nodeId.Identifier
    id-prefix: "" # KEPServer용 prefix - namespace-map을 빈 값으로 설정하여 중복 방지

    # Delay in ms between each push of data points to targets
    # Alternatively, use N[timeunit] where timeunit is w, d, h, m, s or ms.
    data-push-delay: 100

    # KEPServer의 실제 태그 구조에 맞게 루트 노드 설정
    root-nodes:
        - namespace-uri: "KEPServerEX"
          node-id: "s=S.A"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.B"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.C"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.D"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.E"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.F"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.G"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.H"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.I"
        #- namespace-uri: "KEPServerEX"
        #  node-id: "s=S.J"
    # - namespace-uri:
        #   node-id:

    # KEPServer의 네임스페이스 매핑 - TAG_LIST_BASED 전략을 위해 빈 값으로 설정
    namespace-map:
        "KEPServerEX": ""
    # Config for how OPC-UA data-types are mapped to destinations
   

    # Time in minutes between each call to browse the OPC-UA directory, then push new nodes to destinations.
    # Note that this is a heavy operation, so this number should not be set too low.
    # Alternatively, use N[timeunit] where timeunit is w, d, h, m, s or ms.
    # You may also use a cron expression on the form "[minute] [hour] [day of month] [month] [day of week]"
    # See https://crontab.cronhub.io/
    auto-rebrowse-period: 30m
    # Enable using audit events to discover new nodes. If this is set to true, the client will expect AuditAddNodes/AuditAddReferences
    # events on the server node. These will be used to add new nodes automatically, by recursively browsing from each given ParentId.
    enable-audit-discovery: false

    # Update data in destinations on rebrowse or restart.
    # Set auto-rebrowse-period to some value to do this periodically.
    # Context refers to the structure of the node graph in OPC-UA. (assetId and parentId in CDF)
    # Metadata refers to any information obtained from OPC-UA properties. (metadata in CDF)
    # Enabling anything here will increase the startup- and rebrowse-time of the extractor. Enabling metadata will increase it more.
#    update:
#        objects:
#            name: false
#            description: false
#            context: false
#            metadata: false
#        variables:
#            name: false
#            description: false
#            context: false
#            metadata: false

   
    # A list of transformations to be applied to the source nodes before pushing
    # The possible transformations are
    # "Ignore", ignore the node. This will ignore all descendants of the node.
    # If the filter does not use "is-array", "description" or "parent", this is done
    # while reading, and so children will not be read at all. Otherwise, the filtering happens later.
    # "Property", turn the node into a property, which is treated as metadata.
    # This also applies to descendants. Nested metadata is give a name like "grandparent_parent_variable", for
    # each variable in the tree.
    # "DropSubscriptions", do not subscribe to this node with neither events or data-points.
    # "TimeSeries", do not treat this variable as a property.
    # "AsEvents", convert datapoints generated by this variable to events.
    # "Include", include this node. If any Include filter is present all nodes are ignored by default.
    # "AsEvents", if this matches a variable, treat datapoints generated by this variable as events.
    # There is some overhead associated with the filters. They are applied sequentially, so it can help performance to put
    # "Ignore" filters first. This is also worth noting when it comes to TimeSeries transformations, which can undo Property
    # transformations.
    # It is possible to have multiple of each filter type.
    #
    # name, description, id, namespace, and type-definition can be one of
    #  - A regex string
    #  - A list of strings, in which case the filter is a match if any of these are equal to the value being matched.
    #  - An object on the form
    #    name:
    #      file: ...
    #    where "file" is a path to a local file containing newline-separated values to be matched exactly.
    transformations:
      - type: Ignore
        filter:
          #id: "s=Simulation Examples.Functions._System"
          id: "s=S.A._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.B._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.C._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.D._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.E._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.F._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.G._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.H._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.I._System"
      #- type: Ignore
      #  filter:
      #    id: "s=S.J._System"
      # Type, either "Ignore", "Property", "DropSubscriptions", "TimeSeries", "AsEvents", or "Include"
      # - type:
      #  NodeFilter. All non-null filters must match each node for the transformation to be applied.
      #   filter:
            # Regex on node DisplayName
            # name:
            # Regex on node Description. If this is set, requires description to be non-null.
            # description:
            # Regex on node id. Ids on the form "i=123" or "s=string" are matched.
            # id:
            # Whether the node is an array. If this is set, the filter only matches varables.
            # is-array:
            # Regex on the full namespace of the node id.
            # namespace:
            # Regex on the id of the type definition. On the form "i=123" or "s=string"
            # type-definition:
            # The OPC-UA node class, exact match. Should be one of
            # "Object", "ObjectType", "Variable", "VariableType". The other types will work, but do nothing, since we never read those.
            # node-class:
            # The "historizing" attribute on variables. If this is set, the filter only matches variables.
            # historizing:
            # Another instance of NodeFilter which is applied to the parent node.
            # parent:
    # Configure extractor to trigger a rebrowse when there are changes to specific namespace metadata nodes.
    # Also supports filtering by namespace uris.
#    rebrowse-triggers:
        # A dictionary of nodes to which we would like to listen for changes.
#        targets:
#            namespace-publication-date: false
        # A list of namespace uris from which the targets above will be selected and listen for
#        namespaces:
#        - http://opcfoundation.org/UA/
    # Configure soft deletes. When this is enabled, all read nodes are written to a state store after browse,
    # and nodes that are missing on subsequent browses are marked as deleted from CDF, with a configurable
    # marker.
    # A notable exception is relationships in CDF, which has no metadata, so these are hard-deleted if
    # cognite.delete-relationships is enabled
#    deletes:
        # True to enable deletes. This requires a state store to be configured.
#       enabled: false
        # Name of marker indicating that a node is deleted.
        # Added to metadata, or as a column in Raw.
#        delete-marker: "deleted"

    # Configuration for ingesting status codes to CDF timeseries.
    status-codes:
        # Which data points to ingest to CDF.
        # `All` ingests all datapoints, including bad.
        # `Uncertain` ingests good and uncertain data points.
        # `GoodOnly` ingest only good datapoints.
        status-codes-to-ingest: GoodOnly
        ingest-status-codes: false

subscriptions:
    # Enable subscriptions on data-points.
    data-points: true
    # Enable subscriptions on events. Requires events.enabled to be set to true.
    events: false
    # Modify the DataChangeFilter used for datapoint subscriptions. See OPC-UA reference part 4 7.17.2 for details.
    # These are just passed to the server, they have no effect on extractor behavior.
    # Filters are applied to all nodes, but deadband should only affect some, according to the standard.
    data-change-filter:
        # One of Status, StatusValue, or StatusValueTimestamp.
        trigger: "StatusValueTimestamp"
        # One of None, Absolute, or Percent.
        deadband-type: "None"
        # Double value of the deadband.
        deadband-value: 0
    # Log bad subscription datapoints
    log-bad-values: true
    # Ignore the access level parameter for history and datapoints.
    # This means using the "Historizing" parameter for history, and subscribing to all timeseries, independent of AccessLevel.
    ignore-access-level: false
    # How often the server requests updates from the source system (the source system is often the server itself)
    # 0 uses maximum rate set by server
    # Lower increases server load. This should be set to below the maximum update frequency of the source system.
    sampling-interval: 100
    # Length of internal server queue for each subscribed item. < 2 means that any updates occuring between publish requests are lost.
    queue-length: 10
    # The number of publish requests without a response before the server should send a keep alive message.
    keep-alive-count: 10
    # The number of publish requests without a response before the server should close the subscription.
    # Must be at least 3 * keep-alive-count.
    lifetime-count: 1000
    # Recreate subscriptions that have stopped publishing. Enabled by default.
    recreate-stopped-subscriptions: true
    # Grace period for recreating stopped subscriptions.
    # If this is negative, default to 8 * publishing-interval.
    # Syntax is N[timeunit] where timeunit is w, d, h, m, s or ms.
    recreate-subscription-grace-period: -1
    # List of alternative subscription configurations.
    # The first entry with a matching filter will be used for each node.
    alternative-configs:
        # Filter on node, if this matches or is null, the config will be applied.
        #- filter:
             # Regex match on node external ID.
        #    id:
             # Regex match on node data type, if it is a variable.
        #    data-type:
             # Match on whether this subscription is for data points or events.
        #    is-event-state:
           # See subscriptions.data-change-filter
        #  data-change-filter:
           # See subscriptions.sampling-interval
        #  sampling-interval: 100
           # See subscriptions.queue-length
        #  queue-length: 10
logger:
    console:
        level: "verbose"
    file:
        level: "information"
        path: "logs/log.txt"


metrics:
    # otherMetrics:
    #   - namespaceUri: "KEPServerEX"

influx-db-metrics:
     enabled: true
     url: "http://192.168.11.116:58086"
     database: "opcua_metrics" 
     username: "admin"
     password: "admin"
     retention-policy: "autogen"
     measurement-prefix: "opcua"
     batch-size: 100

influx:
    # Set to true to enable this destination
    enabled: false
    # Host URI, ex localhost:8086
#    host: http://192.168.11.116:58086
    # Influx username
#    username: admin
    # Influx password
#    password: admin
    # Database to connect to, will not be created automatically
#    database: test
    # Replace all instances of NaN or Infinity with this floating point number. If left empty, ignore instead.
#    non-finite-replacement: 0
    # Whether to read start/end-points on startup, where possible. At least one pusher should be able to do this,
    # otherwise back/frontfill will run for the entire history every restart.
#   read-extracted-ranges: true
    # Whether to read start/end-points for events on startup, where possible.
#    read-extracted-event-ranges: false
    # Max number of points to send in each request to influx
#    point-chunk-size: 1000

mqtt: 
    # TCP Broker URL
    #host: rabbitmq313-q
    enabled: true
    host: 192.168.11.116 
    # TCP Broker port
    port: 59183
    # MQTT broker username
    username: admin
    # MQTT broker password
    password: misoinfo1!
    # True to enable TLS
    use-tls: false
    # Allow untrusted server SSL certificates. This is fundamentally unsafe
    allow-untrusted-certificates: true
    # Optional path to a custom certificate authority file for SSL
 #   custom-certificate-authority:
    # Mqtt client id. Should be unique for a given broker.
    client-id: OPC-UA-Ext-Plain-JSON
    # Data set to use for new objects. Existing objects will not be updated
 #   data-set-id: 1234567890123456
    # Assets topic
    asset-topic: opcua/assets
    # Timeseries topic
    ts-topic: opcua/timeseries
    # Events topic
 #   event-topic: opcua/events
    # Datapoints topic
    datapoint-topic: opcua/datapoints
    # Raw topic
    raw-topic: opcua/raw
    # Whether to use gRPC/Protobuf serialization for datapoints
    # If true, datapoints will be serialized using Protobuf (gRPC format) - default and topic will be opcua/datapoints
    # If false, datapoints will be serialized using JSON format and topic will be opcua/datapoints/json
    use-grpc: false
    # Timestamp format for JSON serialization
    # "epoch" - Unix timestamp in milliseconds since epoch (default)
    # "iso8601" - ISO 8601 format (YYYY-MM-DDTHH:mm:ss.SSS+09:00)
    timestamp-format: iso8601
    # Timezone offset for ISO8601 timestamp format
    # Format: "+09:00" for Korea time, "+00:00" for UTC, etc.
    # Only used when timestamp-format is "iso8601"
    timezone-offset: "+09:00"
    # JSON format type for MQTT output
    # Available options:
    # "Legacy" - Original timeseries format (existing format for backward compatibility)
    # "PollingSnapshotObject" - Structured object format for polling/batch reads
    #   - Includes metadata with data_ingest_type, message_timestamp, etc.
    #   - Data section with shared timestamp and tags array
    #   - Optimized for bulk data transmission with minimal size
    # "PollingSnapshotPlain" - Flat structure format for polling/batch reads  
    #   - Includes metadata with camelCase naming (dataIngestType, messageTimestamp)
    #   - Tag values directly in root object with shared timestamp
    #   - Most compact format for high-volume data
    # "Subscription" - Format for subscription-based data with individual timestamps
    #   - Supports multiple data points per tag with different timestamps
    #   - Each tag has its own data array with timestamp, value, sc, dt
    #   - Ideal for event-driven subscription scenarios
    
    json-format-type: Subscription
    
    # Whether to include metadata object in JSON output
    include-metadata: true
    # Whether to include msgRecvStartTimestamp and msgRecvEndTimestamp in metadata
    # Only applicable when include-metadata is true
    include-message-timestamps: true
    # Whether to include data type (dt) field for each tag
    include-data-type: false
    # Whether to include status code (sc) field for each tag
    include-status-code: false
    
    # Adaptive chunking configuration for MQTT message optimization
    # Maximum MQTT message size in bytes (default: 1048576 = 1MB)
    max-message-size: 104857600
    # Maximum number of data points in a single chunk (default: 10000)
    max-chunk-size: 500
    # Minimum number of data points in a single chunk (default: 10)
    min-chunk-size: 10
    
    # Maximum number of concurrent chunk processing for parallel MQTT publishing (default: 4)
    # Higher values may improve throughput but can overwhelm the MQTT broker
    max-concurrency: 4
    
    # MQTT transmission strategy for grouping and sending data
    # ROOT_NODE_BASED: Group by extraction.root-nodes configuration
    # CHUNK_BASED: Use existing chunking strategy (default) 
    # TAG_LIST_BASED: Group by specified tag lists
    # TAG_CHANGE_BASED: Send based on OPC UA tag changes (subscription-based)
    mqtt-transmission-strategy: ROOT_NODE_BASED
    
    # Configuration for tag list grouping when mqtt-transmission-strategy is TAG_LIST_BASED
    # tag-lists:
    #   - ["kep.S.A.tag1", "kep.S.A.tag2", "kep.S.A.tag3"]  # Group 1
    #   - ["kep.S.B.tag1", "kep.S.B.tag2"]                  # Group 2

    # Configuration for tag list grouping when mqtt-transmission-strategy is TAG_LIST_BASED
    # Example with correct tag ID format: id-prefix + namespace-map + node-identifier
    # Expected format: "kep" + "" + "s=S.A.Tag1" = "keps=S.A.Tag1"
    tag-lists:
      # Group 1: S.A tags (first 5 tags for testing)
      - ["s=S.A.Tag1", "s=S.A.Tag2", "s=S.A.Tag3", "s=S.A.Tag4", "s=S.A.Tag5", "s=S.A.Tag6", "s=S.A.Tag7", "s=S.A.Tag8", "s=S.A.Tag9", "s=S.A.Tag10", "s=S.A.Tag11", "s=S.A.Tag12", "s=S.A.Tag13", "s=S.A.Tag14", "s=S.A.Tag15", "s=S.A.Tag16", "s=S.A.Tag17", "s=S.A.Tag18", "s=S.A.Tag19", "s=S.A.Tag20", "s=S.A.Tag21", "s=S.A.Tag22", "s=S.A.Tag23", "s=S.A.Tag24", "s=S.A.Tag25", "s=S.A.Tag26", "s=S.A.Tag27", "s=S.A.Tag28", "s=S.A.Tag29", "s=S.A.Tag30", "s=S.A.Tag31", "s=S.A.Tag32", "s=S.A.Tag33", "s=S.A.Tag34", "s=S.A.Tag35", "s=S.A.Tag36", "s=S.A.Tag37", "s=S.A.Tag38", "s=S.A.Tag39", "s=S.A.Tag40", "s=S.A.Tag41", "s=S.A.Tag42", "s=S.A.Tag43", "s=S.A.Tag44", "s=S.A.Tag45", "s=S.A.Tag46", "s=S.A.Tag47", "s=S.A.Tag48", "s=S.A.Tag49", "s=S.A.Tag50", "s=S.A.Tag51", "s=S.A.Tag52", "s=S.A.Tag53", "s=S.A.Tag54", "s=S.A.Tag55", "s=S.A.Tag56", "s=S.A.Tag57", "s=S.A.Tag58", "s=S.A.Tag59", "s=S.A.Tag60", "s=S.A.Tag61", "s=S.A.Tag62", "s=S.A.Tag63", "s=S.A.Tag64", "s=S.A.Tag65", "s=S.A.Tag66", "s=S.A.Tag67", "s=S.A.Tag68", "s=S.A.Tag69", "s=S.A.Tag70", "s=S.A.Tag71", "s=S.A.Tag72", "s=S.A.Tag73", "s=S.A.Tag74", "s=S.A.Tag75", "s=S.A.Tag76", "s=S.A.Tag77", "s=S.A.Tag78", "s=S.A.Tag79", "s=S.A.Tag80", "s=S.A.Tag81", "s=S.A.Tag82", "s=S.A.Tag83", "s=S.A.Tag84", "s=S.A.Tag85", "s=S.A.Tag86", "s=S.A.Tag87", "s=S.A.Tag88", "s=S.A.Tag89", "s=S.A.Tag90", "s=S.A.Tag91", "s=S.A.Tag92", "s=S.A.Tag93", "s=S.A.Tag94", "s=S.A.Tag95", "s=S.A.Tag96", "s=S.A.Tag97", "s=S.A.Tag98", "s=S.A.Tag99", "s=S.A.Tag100", "s=S.A.Tag101", "s=S.A.Tag102", "s=S.A.Tag103", "s=S.A.Tag104", "s=S.A.Tag105", "s=S.A.Tag106", "s=S.A.Tag107", "s=S.A.Tag108", "s=S.A.Tag109", "s=S.A.Tag110", "s=S.A.Tag111", "s=S.A.Tag112", "s=S.A.Tag113", "s=S.A.Tag114", "s=S.A.Tag115", "s=S.A.Tag116", "s=S.A.Tag117", "s=S.A.Tag118", "s=S.A.Tag119", "s=S.A.Tag120", "s=S.A.Tag121", "s=S.A.Tag122", "s=S.A.Tag123", "s=S.A.Tag124", "s=S.A.Tag125", "s=S.A.Tag126", "s=S.A.Tag127", "s=S.A.Tag128", "s=S.A.Tag129", "s=S.A.Tag130", "s=S.A.Tag131", "s=S.A.Tag132", "s=S.A.Tag133", "s=S.A.Tag134", "s=S.A.Tag135", "s=S.A.Tag136", "s=S.A.Tag137", "s=S.A.Tag138", "s=S.A.Tag139", "s=S.A.Tag140", "s=S.A.Tag141", "s=S.A.Tag142", "s=S.A.Tag143", "s=S.A.Tag144", "s=S.A.Tag145", "s=S.A.Tag146", "s=S.A.Tag147", "s=S.A.Tag148", "s=S.A.Tag149", "s=S.A.Tag150", "s=S.A.Tag151", "s=S.A.Tag152", "s=S.A.Tag153", "s=S.A.Tag154", "s=S.A.Tag155", "s=S.A.Tag156", "s=S.A.Tag157", "s=S.A.Tag158", "s=S.A.Tag159", "s=S.A.Tag160", "s=S.A.Tag161", "s=S.A.Tag162", "s=S.A.Tag163", "s=S.A.Tag164", "s=S.A.Tag165", "s=S.A.Tag166", "s=S.A.Tag167", "s=S.A.Tag168", "s=S.A.Tag169", "s=S.A.Tag170", "s=S.A.Tag171", "s=S.A.Tag172", "s=S.A.Tag173", "s=S.A.Tag174", "s=S.A.Tag175", "s=S.A.Tag176", "s=S.A.Tag177", "s=S.A.Tag178", "s=S.A.Tag179", "s=S.A.Tag180", "s=S.A.Tag181", "s=S.A.Tag182", "s=S.A.Tag183", "s=S.A.Tag184", "s=S.A.Tag185", "s=S.A.Tag186", "s=S.A.Tag187", "s=S.A.Tag188", "s=S.A.Tag189", "s=S.A.Tag190", "s=S.A.Tag191", "s=S.A.Tag192", "s=S.A.Tag193", "s=S.A.Tag194", "s=S.A.Tag195", "s=S.A.Tag196", "s=S.A.Tag197", "s=S.A.Tag198", "s=S.A.Tag199", "s=S.A.Tag200", "s=S.A.Tag201", "s=S.A.Tag202", "s=S.A.Tag203", "s=S.A.Tag204", "s=S.A.Tag205", "s=S.A.Tag206", "s=S.A.Tag207", "s=S.A.Tag208", "s=S.A.Tag209", "s=S.A.Tag210", "s=S.A.Tag211", "s=S.A.Tag212", "s=S.A.Tag213", "s=S.A.Tag214", "s=S.A.Tag215", "s=S.A.Tag216", "s=S.A.Tag217", "s=S.A.Tag218", "s=S.A.Tag219", "s=S.A.Tag220", "s=S.A.Tag221", "s=S.A.Tag222", "s=S.A.Tag223", "s=S.A.Tag224", "s=S.A.Tag225", "s=S.A.Tag226", "s=S.A.Tag227", "s=S.A.Tag228", "s=S.A.Tag229", "s=S.A.Tag230", "s=S.A.Tag231", "s=S.A.Tag232", "s=S.A.Tag233", "s=S.A.Tag234", "s=S.A.Tag235", "s=S.A.Tag236", "s=S.A.Tag237", "s=S.A.Tag238", "s=S.A.Tag239", "s=S.A.Tag240", "s=S.A.Tag241", "s=S.A.Tag242", "s=S.A.Tag243", "s=S.A.Tag244", "s=S.A.Tag245", "s=S.A.Tag246", "s=S.A.Tag247", "s=S.A.Tag248", "s=S.A.Tag249", "s=S.A.Tag250", "s=S.A.Tag251", "s=S.A.Tag252", "s=S.A.Tag253", "s=S.A.Tag254", "s=S.A.Tag255", "s=S.A.Tag256", "s=S.A.Tag257", "s=S.A.Tag258", "s=S.A.Tag259", "s=S.A.Tag260", "s=S.A.Tag261", "s=S.A.Tag262", "s=S.A.Tag263", "s=S.A.Tag264", "s=S.A.Tag265", "s=S.A.Tag266", "s=S.A.Tag267", "s=S.A.Tag268", "s=S.A.Tag269", "s=S.A.Tag270", "s=S.A.Tag271", "s=S.A.Tag272", "s=S.A.Tag273", "s=S.A.Tag274", "s=S.A.Tag275", "s=S.A.Tag276", "s=S.A.Tag277", "s=S.A.Tag278", "s=S.A.Tag279", "s=S.A.Tag280", "s=S.A.Tag281", "s=S.A.Tag282", "s=S.A.Tag283", "s=S.A.Tag284", "s=S.A.Tag285", "s=S.A.Tag286", "s=S.A.Tag287", "s=S.A.Tag288", "s=S.A.Tag289", "s=S.A.Tag290", "s=S.A.Tag291", "s=S.A.Tag292", "s=S.A.Tag293", "s=S.A.Tag294", "s=S.A.Tag295", "s=S.A.Tag296", "s=S.A.Tag297", "s=S.A.Tag298", "s=S.A.Tag299", "s=S.A.Tag300", "s=S.A.Tag301", "s=S.A.Tag302", "s=S.A.Tag303", "s=S.A.Tag304", "s=S.A.Tag305", "s=S.A.Tag306", "s=S.A.Tag307", "s=S.A.Tag308", "s=S.A.Tag309", "s=S.A.Tag310", "s=S.A.Tag311", "s=S.A.Tag312", "s=S.A.Tag313", "s=S.A.Tag314", "s=S.A.Tag315", "s=S.A.Tag316", "s=S.A.Tag317", "s=S.A.Tag318", "s=S.A.Tag319", "s=S.A.Tag320", "s=S.A.Tag321", "s=S.A.Tag322", "s=S.A.Tag323", "s=S.A.Tag324", "s=S.A.Tag325", "s=S.A.Tag326", "s=S.A.Tag327", "s=S.A.Tag328", "s=S.A.Tag329", "s=S.A.Tag330", "s=S.A.Tag331", "s=S.A.Tag332", "s=S.A.Tag333", "s=S.A.Tag334", "s=S.A.Tag335", "s=S.A.Tag336", "s=S.A.Tag337", "s=S.A.Tag338", "s=S.A.Tag339", "s=S.A.Tag340", "s=S.A.Tag341", "s=S.A.Tag342", "s=S.A.Tag343", "s=S.A.Tag344", "s=S.A.Tag345", "s=S.A.Tag346", "s=S.A.Tag347", "s=S.A.Tag348", "s=S.A.Tag349", "s=S.A.Tag350", "s=S.A.Tag351", "s=S.A.Tag352", "s=S.A.Tag353", "s=S.A.Tag354", "s=S.A.Tag355", "s=S.A.Tag356", "s=S.A.Tag357", "s=S.A.Tag358", "s=S.A.Tag359", "s=S.A.Tag360", "s=S.A.Tag361", "s=S.A.Tag362", "s=S.A.Tag363", "s=S.A.Tag364", "s=S.A.Tag365", "s=S.A.Tag366", "s=S.A.Tag367", "s=S.A.Tag368", "s=S.A.Tag369", "s=S.A.Tag370", "s=S.A.Tag371", "s=S.A.Tag372", "s=S.A.Tag373", "s=S.A.Tag374", "s=S.A.Tag375", "s=S.A.Tag376", "s=S.A.Tag377", "s=S.A.Tag378", "s=S.A.Tag379", "s=S.A.Tag380", "s=S.A.Tag381", "s=S.A.Tag382", "s=S.A.Tag383", "s=S.A.Tag384", "s=S.A.Tag385", "s=S.A.Tag386", "s=S.A.Tag387", "s=S.A.Tag388", "s=S.A.Tag389", "s=S.A.Tag390", "s=S.A.Tag391", "s=S.A.Tag392", "s=S.A.Tag393", "s=S.A.Tag394", "s=S.A.Tag395", "s=S.A.Tag396", "s=S.A.Tag397", "s=S.A.Tag398", "s=S.A.Tag399", "s=S.A.Tag400", "s=S.A.Tag401", "s=S.A.Tag402", "s=S.A.Tag403", "s=S.A.Tag404", "s=S.A.Tag405", "s=S.A.Tag406", "s=S.A.Tag407", "s=S.A.Tag408", "s=S.A.Tag409", "s=S.A.Tag410", "s=S.A.Tag411", "s=S.A.Tag412", "s=S.A.Tag413", "s=S.A.Tag414", "s=S.A.Tag415", "s=S.A.Tag416", "s=S.A.Tag417", "s=S.A.Tag418", "s=S.A.Tag419", "s=S.A.Tag420", "s=S.A.Tag421", "s=S.A.Tag422", "s=S.A.Tag423", "s=S.A.Tag424", "s=S.A.Tag425", "s=S.A.Tag426", "s=S.A.Tag427", "s=S.A.Tag428", "s=S.A.Tag429", "s=S.A.Tag430", "s=S.A.Tag431", "s=S.A.Tag432", "s=S.A.Tag433", "s=S.A.Tag434", "s=S.A.Tag435", "s=S.A.Tag436", "s=S.A.Tag437", "s=S.A.Tag438", "s=S.A.Tag439", "s=S.A.Tag440", "s=S.A.Tag441", "s=S.A.Tag442", "s=S.A.Tag443", "s=S.A.Tag444", "s=S.A.Tag445", "s=S.A.Tag446", "s=S.A.Tag447", "s=S.A.Tag448", "s=S.A.Tag449", "s=S.A.Tag450", "s=S.A.Tag451", "s=S.A.Tag452", "s=S.A.Tag453", "s=S.A.Tag454", "s=S.A.Tag455", "s=S.A.Tag456", "s=S.A.Tag457", "s=S.A.Tag458", "s=S.A.Tag459", "s=S.A.Tag460", "s=S.A.Tag461", "s=S.A.Tag462", "s=S.A.Tag463", "s=S.A.Tag464", "s=S.A.Tag465", "s=S.A.Tag466", "s=S.A.Tag467", "s=S.A.Tag468", "s=S.A.Tag469", "s=S.A.Tag470", "s=S.A.Tag471", "s=S.A.Tag472", "s=S.A.Tag473", "s=S.A.Tag474", "s=S.A.Tag475", "s=S.A.Tag476", "s=S.A.Tag477", "s=S.A.Tag478", "s=S.A.Tag479", "s=S.A.Tag480", "s=S.A.Tag481", "s=S.A.Tag482", "s=S.A.Tag483", "s=S.A.Tag484", "s=S.A.Tag485", "s=S.A.Tag486", "s=S.A.Tag487", "s=S.A.Tag488", "s=S.A.Tag489", "s=S.A.Tag490", "s=S.A.Tag491", "s=S.A.Tag492", "s=S.A.Tag493", "s=S.A.Tag494", "s=S.A.Tag495", "s=S.A.Tag496", "s=S.A.Tag497", "s=S.A.Tag498", "s=S.A.Tag499", "s=S.A.Tag500", "s=S.A.Tag501", "s=S.A.Tag502", "s=S.A.Tag503", "s=S.A.Tag504", "s=S.A.Tag505", "s=S.A.Tag506", "s=S.A.Tag507", "s=S.A.Tag508", "s=S.A.Tag509", "s=S.A.Tag510", "s=S.A.Tag511", "s=S.A.Tag512", "s=S.A.Tag513", "s=S.A.Tag514", "s=S.A.Tag515", "s=S.A.Tag516", "s=S.A.Tag517", "s=S.A.Tag518", "s=S.A.Tag519", "s=S.A.Tag520", "s=S.A.Tag521", "s=S.A.Tag522", "s=S.A.Tag523", "s=S.A.Tag524", "s=S.A.Tag525", "s=S.A.Tag526", "s=S.A.Tag527", "s=S.A.Tag528", "s=S.A.Tag529", "s=S.A.Tag530", "s=S.A.Tag531", "s=S.A.Tag532", "s=S.A.Tag533", "s=S.A.Tag534", "s=S.A.Tag535", "s=S.A.Tag536", "s=S.A.Tag537", "s=S.A.Tag538", "s=S.A.Tag539", "s=S.A.Tag540", "s=S.A.Tag541", "s=S.A.Tag542", "s=S.A.Tag543", "s=S.A.Tag544", "s=S.A.Tag545", "s=S.A.Tag546", "s=S.A.Tag547", "s=S.A.Tag548", "s=S.A.Tag549", "s=S.A.Tag550", "s=S.A.Tag551", "s=S.A.Tag552", "s=S.A.Tag553", "s=S.A.Tag554", "s=S.A.Tag555", "s=S.A.Tag556", "s=S.A.Tag557", "s=S.A.Tag558", "s=S.A.Tag559", "s=S.A.Tag560", "s=S.A.Tag561", "s=S.A.Tag562", "s=S.A.Tag563", "s=S.A.Tag564", "s=S.A.Tag565", "s=S.A.Tag566", "s=S.A.Tag567", "s=S.A.Tag568", "s=S.A.Tag569", "s=S.A.Tag570", "s=S.A.Tag571", "s=S.A.Tag572", "s=S.A.Tag573", "s=S.A.Tag574", "s=S.A.Tag575", "s=S.A.Tag576", "s=S.A.Tag577", "s=S.A.Tag578", "s=S.A.Tag579", "s=S.A.Tag580", "s=S.A.Tag581", "s=S.A.Tag582", "s=S.A.Tag583", "s=S.A.Tag584", "s=S.A.Tag585", "s=S.A.Tag586", "s=S.A.Tag587", "s=S.A.Tag588", "s=S.A.Tag589", "s=S.A.Tag590", "s=S.A.Tag591", "s=S.A.Tag592", "s=S.A.Tag593", "s=S.A.Tag594", "s=S.A.Tag595", "s=S.A.Tag596", "s=S.A.Tag597", "s=S.A.Tag598", "s=S.A.Tag599", "s=S.A.Tag600", "s=S.A.Tag601", "s=S.A.Tag602", "s=S.A.Tag603", "s=S.A.Tag604", "s=S.A.Tag605", "s=S.A.Tag606", "s=S.A.Tag607", "s=S.A.Tag608", "s=S.A.Tag609", "s=S.A.Tag610", "s=S.A.Tag611", "s=S.A.Tag612", "s=S.A.Tag613", "s=S.A.Tag614", "s=S.A.Tag615", "s=S.A.Tag616", "s=S.A.Tag617", "s=S.A.Tag618", "s=S.A.Tag619", "s=S.A.Tag620", "s=S.A.Tag621", "s=S.A.Tag622", "s=S.A.Tag623", "s=S.A.Tag624", "s=S.A.Tag625", "s=S.A.Tag626", "s=S.A.Tag627", "s=S.A.Tag628", "s=S.A.Tag629", "s=S.A.Tag630", "s=S.A.Tag631", "s=S.A.Tag632", "s=S.A.Tag633", "s=S.A.Tag634", "s=S.A.Tag635", "s=S.A.Tag636", "s=S.A.Tag637", "s=S.A.Tag638", "s=S.A.Tag639", "s=S.A.Tag640", "s=S.A.Tag641", "s=S.A.Tag642", "s=S.A.Tag643", "s=S.A.Tag644", "s=S.A.Tag645", "s=S.A.Tag646", "s=S.A.Tag647", "s=S.A.Tag648", "s=S.A.Tag649", "s=S.A.Tag650", "s=S.A.Tag651", "s=S.A.Tag652", "s=S.A.Tag653", "s=S.A.Tag654", "s=S.A.Tag655", "s=S.A.Tag656", "s=S.A.Tag657", "s=S.A.Tag658", "s=S.A.Tag659", "s=S.A.Tag660", "s=S.A.Tag661", "s=S.A.Tag662", "s=S.A.Tag663", "s=S.A.Tag664", "s=S.A.Tag665", "s=S.A.Tag666", "s=S.A.Tag667", "s=S.A.Tag668", "s=S.A.Tag669", "s=S.A.Tag670", "s=S.A.Tag671", "s=S.A.Tag672", "s=S.A.Tag673", "s=S.A.Tag674", "s=S.A.Tag675", "s=S.A.Tag676", "s=S.A.Tag677", "s=S.A.Tag678", "s=S.A.Tag679", "s=S.A.Tag680", "s=S.A.Tag681", "s=S.A.Tag682", "s=S.A.Tag683", "s=S.A.Tag684", "s=S.A.Tag685", "s=S.A.Tag686", "s=S.A.Tag687", "s=S.A.Tag688", "s=S.A.Tag689", "s=S.A.Tag690", "s=S.A.Tag691", "s=S.A.Tag692", "s=S.A.Tag693", "s=S.A.Tag694", "s=S.A.Tag695", "s=S.A.Tag696", "s=S.A.Tag697", "s=S.A.Tag698", "s=S.A.Tag699", "s=S.A.Tag700", "s=S.A.Tag701", "s=S.A.Tag702", "s=S.A.Tag703", "s=S.A.Tag704", "s=S.A.Tag705", "s=S.A.Tag706", "s=S.A.Tag707", "s=S.A.Tag708", "s=S.A.Tag709", "s=S.A.Tag710", "s=S.A.Tag711", "s=S.A.Tag712", "s=S.A.Tag713", "s=S.A.Tag714", "s=S.A.Tag715", "s=S.A.Tag716", "s=S.A.Tag717", "s=S.A.Tag718", "s=S.A.Tag719", "s=S.A.Tag720", "s=S.A.Tag721", "s=S.A.Tag722", "s=S.A.Tag723", "s=S.A.Tag724", "s=S.A.Tag725", "s=S.A.Tag726", "s=S.A.Tag727", "s=S.A.Tag728", "s=S.A.Tag729", "s=S.A.Tag730", "s=S.A.Tag731", "s=S.A.Tag732", "s=S.A.Tag733", "s=S.A.Tag734", "s=S.A.Tag735", "s=S.A.Tag736", "s=S.A.Tag737", "s=S.A.Tag738", "s=S.A.Tag739", "s=S.A.Tag740", "s=S.A.Tag741", "s=S.A.Tag742", "s=S.A.Tag743", "s=S.A.Tag744", "s=S.A.Tag745", "s=S.A.Tag746", "s=S.A.Tag747", "s=S.A.Tag748", "s=S.A.Tag749", "s=S.A.Tag750", "s=S.A.Tag751", "s=S.A.Tag752", "s=S.A.Tag753", "s=S.A.Tag754", "s=S.A.Tag755", "s=S.A.Tag756", "s=S.A.Tag757", "s=S.A.Tag758", "s=S.A.Tag759", "s=S.A.Tag760", "s=S.A.Tag761", "s=S.A.Tag762", "s=S.A.Tag763", "s=S.A.Tag764", "s=S.A.Tag765", "s=S.A.Tag766", "s=S.A.Tag767", "s=S.A.Tag768", "s=S.A.Tag769", "s=S.A.Tag770", "s=S.A.Tag771", "s=S.A.Tag772", "s=S.A.Tag773", "s=S.A.Tag774", "s=S.A.Tag775", "s=S.A.Tag776", "s=S.A.Tag777", "s=S.A.Tag778", "s=S.A.Tag779", "s=S.A.Tag780", "s=S.A.Tag781", "s=S.A.Tag782", "s=S.A.Tag783", "s=S.A.Tag784", "s=S.A.Tag785", "s=S.A.Tag786", "s=S.A.Tag787", "s=S.A.Tag788", "s=S.A.Tag789", "s=S.A.Tag790", "s=S.A.Tag791", "s=S.A.Tag792", "s=S.A.Tag793", "s=S.A.Tag794", "s=S.A.Tag795", "s=S.A.Tag796", "s=S.A.Tag797", "s=S.A.Tag798", "s=S.A.Tag799", "s=S.A.Tag800", "s=S.A.Tag801", "s=S.A.Tag802", "s=S.A.Tag803", "s=S.A.Tag804", "s=S.A.Tag805", "s=S.A.Tag806", "s=S.A.Tag807", "s=S.A.Tag808", "s=S.A.Tag809", "s=S.A.Tag810", "s=S.A.Tag811", "s=S.A.Tag812", "s=S.A.Tag813", "s=S.A.Tag814", "s=S.A.Tag815", "s=S.A.Tag816", "s=S.A.Tag817", "s=S.A.Tag818", "s=S.A.Tag819", "s=S.A.Tag820", "s=S.A.Tag821", "s=S.A.Tag822", "s=S.A.Tag823", "s=S.A.Tag824", "s=S.A.Tag825", "s=S.A.Tag826", "s=S.A.Tag827", "s=S.A.Tag828", "s=S.A.Tag829", "s=S.A.Tag830", "s=S.A.Tag831", "s=S.A.Tag832", "s=S.A.Tag833", "s=S.A.Tag834", "s=S.A.Tag835", "s=S.A.Tag836", "s=S.A.Tag837", "s=S.A.Tag838", "s=S.A.Tag839", "s=S.A.Tag840", "s=S.A.Tag841", "s=S.A.Tag842", "s=S.A.Tag843", "s=S.A.Tag844", "s=S.A.Tag845", "s=S.A.Tag846", "s=S.A.Tag847", "s=S.A.Tag848", "s=S.A.Tag849", "s=S.A.Tag850", "s=S.A.Tag851", "s=S.A.Tag852", "s=S.A.Tag853", "s=S.A.Tag854", "s=S.A.Tag855", "s=S.A.Tag856", "s=S.A.Tag857", "s=S.A.Tag858", "s=S.A.Tag859", "s=S.A.Tag860", "s=S.A.Tag861", "s=S.A.Tag862", "s=S.A.Tag863", "s=S.A.Tag864", "s=S.A.Tag865", "s=S.A.Tag866", "s=S.A.Tag867", "s=S.A.Tag868", "s=S.A.Tag869", "s=S.A.Tag870", "s=S.A.Tag871", "s=S.A.Tag872", "s=S.A.Tag873", "s=S.A.Tag874", "s=S.A.Tag875", "s=S.A.Tag876", "s=S.A.Tag877", "s=S.A.Tag878", "s=S.A.Tag879", "s=S.A.Tag880", "s=S.A.Tag881", "s=S.A.Tag882", "s=S.A.Tag883", "s=S.A.Tag884", "s=S.A.Tag885", "s=S.A.Tag886", "s=S.A.Tag887", "s=S.A.Tag888", "s=S.A.Tag889", "s=S.A.Tag890", "s=S.A.Tag891", "s=S.A.Tag892", "s=S.A.Tag893", "s=S.A.Tag894", "s=S.A.Tag895", "s=S.A.Tag896", "s=S.A.Tag897", "s=S.A.Tag898", "s=S.A.Tag899", "s=S.A.Tag900", "s=S.A.Tag901", "s=S.A.Tag902", "s=S.A.Tag903", "s=S.A.Tag904", "s=S.A.Tag905", "s=S.A.Tag906", "s=S.A.Tag907", "s=S.A.Tag908", "s=S.A.Tag909", "s=S.A.Tag910", "s=S.A.Tag911", "s=S.A.Tag912", "s=S.A.Tag913", "s=S.A.Tag914", "s=S.A.Tag915", "s=S.A.Tag916", "s=S.A.Tag917", "s=S.A.Tag918", "s=S.A.Tag919", "s=S.A.Tag920", "s=S.A.Tag921", "s=S.A.Tag922", "s=S.A.Tag923", "s=S.A.Tag924", "s=S.A.Tag925", "s=S.A.Tag926", "s=S.A.Tag927", "s=S.A.Tag928", "s=S.A.Tag929", "s=S.A.Tag930", "s=S.A.Tag931", "s=S.A.Tag932", "s=S.A.Tag933", "s=S.A.Tag934", "s=S.A.Tag935", "s=S.A.Tag936", "s=S.A.Tag937", "s=S.A.Tag938", "s=S.A.Tag939", "s=S.A.Tag940", "s=S.A.Tag941", "s=S.A.Tag942", "s=S.A.Tag943", "s=S.A.Tag944", "s=S.A.Tag945", "s=S.A.Tag946", "s=S.A.Tag947", "s=S.A.Tag948", "s=S.A.Tag949", "s=S.A.Tag950", "s=S.A.Tag951", "s=S.A.Tag952", "s=S.A.Tag953", "s=S.A.Tag954", "s=S.A.Tag955", "s=S.A.Tag956", "s=S.A.Tag957", "s=S.A.Tag958", "s=S.A.Tag959", "s=S.A.Tag960", "s=S.A.Tag961", "s=S.A.Tag962", "s=S.A.Tag963", "s=S.A.Tag964", "s=S.A.Tag965", "s=S.A.Tag966", "s=S.A.Tag967", "s=S.A.Tag968", "s=S.A.Tag969", "s=S.A.Tag970", "s=S.A.Tag971", "s=S.A.Tag972", "s=S.A.Tag973", "s=S.A.Tag974", "s=S.A.Tag975", "s=S.A.Tag976", "s=S.A.Tag977", "s=S.A.Tag978", "s=S.A.Tag979", "s=S.A.Tag980", "s=S.A.Tag981", "s=S.A.Tag982", "s=S.A.Tag983", "s=S.A.Tag984", "s=S.A.Tag985", "s=S.A.Tag986", "s=S.A.Tag987", "s=S.A.Tag988", "s=S.A.Tag989", "s=S.A.Tag990", "s=S.A.Tag991", "s=S.A.Tag992", "s=S.A.Tag993", "s=S.A.Tag994", "s=S.A.Tag995", "s=S.A.Tag996", "s=S.A.Tag997", "s=S.A.Tag998", "s=S.A.Tag999", "s=S.A.Tag1000"]
      - ["s=S.B.Tag1", "s=S.B.Tag2", "s=S.B.Tag3", "s=S.B.Tag4", "s=S.B.Tag5", "s=S.B.Tag6", "s=S.B.Tag7", "s=S.B.Tag8", "s=S.B.Tag9", "s=S.B.Tag10", "s=S.B.Tag11", "s=S.B.Tag12", "s=S.B.Tag13", "s=S.B.Tag14", "s=S.B.Tag15", "s=S.B.Tag16", "s=S.B.Tag17", "s=S.B.Tag18", "s=S.B.Tag19", "s=S.B.Tag20", "s=S.B.Tag21", "s=S.B.Tag22", "s=S.B.Tag23", "s=S.B.Tag24", "s=S.B.Tag25", "s=S.B.Tag26", "s=S.B.Tag27", "s=S.B.Tag28", "s=S.B.Tag29", "s=S.B.Tag30", "s=S.B.Tag31", "s=S.B.Tag32", "s=S.B.Tag33", "s=S.B.Tag34", "s=S.B.Tag35", "s=S.B.Tag36", "s=S.B.Tag37", "s=S.B.Tag38", "s=S.B.Tag39", "s=S.B.Tag40", "s=S.B.Tag41", "s=S.B.Tag42", "s=S.B.Tag43", "s=S.B.Tag44", "s=S.B.Tag45", "s=S.B.Tag46", "s=S.B.Tag47", "s=S.B.Tag48", "s=S.B.Tag49", "s=S.B.Tag50", "s=S.B.Tag51", "s=S.B.Tag52", "s=S.B.Tag53", "s=S.B.Tag54", "s=S.B.Tag55", "s=S.B.Tag56", "s=S.B.Tag57", "s=S.B.Tag58", "s=S.B.Tag59", "s=S.B.Tag60", "s=S.B.Tag61", "s=S.B.Tag62", "s=S.B.Tag63", "s=S.B.Tag64", "s=S.B.Tag65", "s=S.B.Tag66", "s=S.B.Tag67", "s=S.B.Tag68", "s=S.B.Tag69", "s=S.B.Tag70", "s=S.B.Tag71", "s=S.B.Tag72", "s=S.B.Tag73", "s=S.B.Tag74", "s=S.B.Tag75", "s=S.B.Tag76", "s=S.B.Tag77", "s=S.B.Tag78", "s=S.B.Tag79", "s=S.B.Tag80", "s=S.B.Tag81", "s=S.B.Tag82", "s=S.B.Tag83", "s=S.B.Tag84", "s=S.B.Tag85", "s=S.B.Tag86", "s=S.B.Tag87", "s=S.B.Tag88", "s=S.B.Tag89", "s=S.B.Tag90", "s=S.B.Tag91", "s=S.B.Tag92", "s=S.B.Tag93", "s=S.B.Tag94", "s=S.B.Tag95", "s=S.B.Tag96", "s=S.B.Tag97", "s=S.B.Tag98", "s=S.B.Tag99", "s=S.B.Tag100", "s=S.B.Tag101", "s=S.B.Tag102", "s=S.B.Tag103", "s=S.B.Tag104", "s=S.B.Tag105", "s=S.B.Tag106", "s=S.B.Tag107", "s=S.B.Tag108", "s=S.B.Tag109", "s=S.B.Tag110", "s=S.B.Tag111", "s=S.B.Tag112", "s=S.B.Tag113", "s=S.B.Tag114", "s=S.B.Tag115", "s=S.B.Tag116", "s=S.B.Tag117", "s=S.B.Tag118", "s=S.B.Tag119", "s=S.B.Tag120", "s=S.B.Tag121", "s=S.B.Tag122", "s=S.B.Tag123", "s=S.B.Tag124", "s=S.B.Tag125", "s=S.B.Tag126", "s=S.B.Tag127", "s=S.B.Tag128", "s=S.B.Tag129", "s=S.B.Tag130", "s=S.B.Tag131", "s=S.B.Tag132", "s=S.B.Tag133", "s=S.B.Tag134", "s=S.B.Tag135", "s=S.B.Tag136", "s=S.B.Tag137", "s=S.B.Tag138", "s=S.B.Tag139", "s=S.B.Tag140", "s=S.B.Tag141", "s=S.B.Tag142", "s=S.B.Tag143", "s=S.B.Tag144", "s=S.B.Tag145", "s=S.B.Tag146", "s=S.B.Tag147", "s=S.B.Tag148", "s=S.B.Tag149", "s=S.B.Tag150", "s=S.B.Tag151", "s=S.B.Tag152", "s=S.B.Tag153", "s=S.B.Tag154", "s=S.B.Tag155", "s=S.B.Tag156", "s=S.B.Tag157", "s=S.B.Tag158", "s=S.B.Tag159", "s=S.B.Tag160", "s=S.B.Tag161", "s=S.B.Tag162", "s=S.B.Tag163", "s=S.B.Tag164", "s=S.B.Tag165", "s=S.B.Tag166", "s=S.B.Tag167", "s=S.B.Tag168", "s=S.B.Tag169", "s=S.B.Tag170", "s=S.B.Tag171", "s=S.B.Tag172", "s=S.B.Tag173", "s=S.B.Tag174", "s=S.B.Tag175", "s=S.B.Tag176", "s=S.B.Tag177", "s=S.B.Tag178", "s=S.B.Tag179", "s=S.B.Tag180", "s=S.B.Tag181", "s=S.B.Tag182", "s=S.B.Tag183", "s=S.B.Tag184", "s=S.B.Tag185", "s=S.B.Tag186", "s=S.B.Tag187", "s=S.B.Tag188", "s=S.B.Tag189", "s=S.B.Tag190", "s=S.B.Tag191", "s=S.B.Tag192", "s=S.B.Tag193", "s=S.B.Tag194", "s=S.B.Tag195", "s=S.B.Tag196", "s=S.B.Tag197", "s=S.B.Tag198", "s=S.B.Tag199", "s=S.B.Tag200", "s=S.B.Tag201", "s=S.B.Tag202", "s=S.B.Tag203", "s=S.B.Tag204", "s=S.B.Tag205", "s=S.B.Tag206", "s=S.B.Tag207", "s=S.B.Tag208", "s=S.B.Tag209", "s=S.B.Tag210", "s=S.B.Tag211", "s=S.B.Tag212", "s=S.B.Tag213", "s=S.B.Tag214", "s=S.B.Tag215", "s=S.B.Tag216", "s=S.B.Tag217", "s=S.B.Tag218", "s=S.B.Tag219", "s=S.B.Tag220", "s=S.B.Tag221", "s=S.B.Tag222", "s=S.B.Tag223", "s=S.B.Tag224", "s=S.B.Tag225", "s=S.B.Tag226", "s=S.B.Tag227", "s=S.B.Tag228", "s=S.B.Tag229", "s=S.B.Tag230", "s=S.B.Tag231", "s=S.B.Tag232", "s=S.B.Tag233", "s=S.B.Tag234", "s=S.B.Tag235", "s=S.B.Tag236", "s=S.B.Tag237", "s=S.B.Tag238", "s=S.B.Tag239", "s=S.B.Tag240", "s=S.B.Tag241", "s=S.B.Tag242", "s=S.B.Tag243", "s=S.B.Tag244", "s=S.B.Tag245", "s=S.B.Tag246", "s=S.B.Tag247", "s=S.B.Tag248", "s=S.B.Tag249", "s=S.B.Tag250", "s=S.B.Tag251", "s=S.B.Tag252", "s=S.B.Tag253", "s=S.B.Tag254", "s=S.B.Tag255", "s=S.B.Tag256", "s=S.B.Tag257", "s=S.B.Tag258", "s=S.B.Tag259", "s=S.B.Tag260", "s=S.B.Tag261", "s=S.B.Tag262", "s=S.B.Tag263", "s=S.B.Tag264", "s=S.B.Tag265", "s=S.B.Tag266", "s=S.B.Tag267", "s=S.B.Tag268", "s=S.B.Tag269", "s=S.B.Tag270", "s=S.B.Tag271", "s=S.B.Tag272", "s=S.B.Tag273", "s=S.B.Tag274", "s=S.B.Tag275", "s=S.B.Tag276", "s=S.B.Tag277", "s=S.B.Tag278", "s=S.B.Tag279", "s=S.B.Tag280", "s=S.B.Tag281", "s=S.B.Tag282", "s=S.B.Tag283", "s=S.B.Tag284", "s=S.B.Tag285", "s=S.B.Tag286", "s=S.B.Tag287", "s=S.B.Tag288", "s=S.B.Tag289", "s=S.B.Tag290", "s=S.B.Tag291", "s=S.B.Tag292", "s=S.B.Tag293", "s=S.B.Tag294", "s=S.B.Tag295", "s=S.B.Tag296", "s=S.B.Tag297", "s=S.B.Tag298", "s=S.B.Tag299", "s=S.B.Tag300", "s=S.B.Tag301", "s=S.B.Tag302", "s=S.B.Tag303", "s=S.B.Tag304", "s=S.B.Tag305", "s=S.B.Tag306", "s=S.B.Tag307", "s=S.B.Tag308", "s=S.B.Tag309", "s=S.B.Tag310", "s=S.B.Tag311", "s=S.B.Tag312", "s=S.B.Tag313", "s=S.B.Tag314", "s=S.B.Tag315", "s=S.B.Tag316", "s=S.B.Tag317", "s=S.B.Tag318", "s=S.B.Tag319", "s=S.B.Tag320", "s=S.B.Tag321", "s=S.B.Tag322", "s=S.B.Tag323", "s=S.B.Tag324", "s=S.B.Tag325", "s=S.B.Tag326", "s=S.B.Tag327", "s=S.B.Tag328", "s=S.B.Tag329", "s=S.B.Tag330", "s=S.B.Tag331", "s=S.B.Tag332", "s=S.B.Tag333", "s=S.B.Tag334", "s=S.B.Tag335", "s=S.B.Tag336", "s=S.B.Tag337", "s=S.B.Tag338", "s=S.B.Tag339", "s=S.B.Tag340", "s=S.B.Tag341", "s=S.B.Tag342", "s=S.B.Tag343", "s=S.B.Tag344", "s=S.B.Tag345", "s=S.B.Tag346", "s=S.B.Tag347", "s=S.B.Tag348", "s=S.B.Tag349", "s=S.B.Tag350", "s=S.B.Tag351", "s=S.B.Tag352", "s=S.B.Tag353", "s=S.B.Tag354", "s=S.B.Tag355", "s=S.B.Tag356", "s=S.B.Tag357", "s=S.B.Tag358", "s=S.B.Tag359", "s=S.B.Tag360", "s=S.B.Tag361", "s=S.B.Tag362", "s=S.B.Tag363", "s=S.B.Tag364", "s=S.B.Tag365", "s=S.B.Tag366", "s=S.B.Tag367", "s=S.B.Tag368", "s=S.B.Tag369", "s=S.B.Tag370", "s=S.B.Tag371", "s=S.B.Tag372", "s=S.B.Tag373", "s=S.B.Tag374", "s=S.B.Tag375", "s=S.B.Tag376", "s=S.B.Tag377", "s=S.B.Tag378", "s=S.B.Tag379", "s=S.B.Tag380", "s=S.B.Tag381", "s=S.B.Tag382", "s=S.B.Tag383", "s=S.B.Tag384", "s=S.B.Tag385", "s=S.B.Tag386", "s=S.B.Tag387", "s=S.B.Tag388", "s=S.B.Tag389", "s=S.B.Tag390", "s=S.B.Tag391", "s=S.B.Tag392", "s=S.B.Tag393", "s=S.B.Tag394", "s=S.B.Tag395", "s=S.B.Tag396", "s=S.B.Tag397", "s=S.B.Tag398", "s=S.B.Tag399", "s=S.B.Tag400", "s=S.B.Tag401", "s=S.B.Tag402", "s=S.B.Tag403", "s=S.B.Tag404", "s=S.B.Tag405", "s=S.B.Tag406", "s=S.B.Tag407", "s=S.B.Tag408", "s=S.B.Tag409", "s=S.B.Tag410", "s=S.B.Tag411", "s=S.B.Tag412", "s=S.B.Tag413", "s=S.B.Tag414", "s=S.B.Tag415", "s=S.B.Tag416", "s=S.B.Tag417", "s=S.B.Tag418", "s=S.B.Tag419", "s=S.B.Tag420", "s=S.B.Tag421", "s=S.B.Tag422", "s=S.B.Tag423", "s=S.B.Tag424", "s=S.B.Tag425", "s=S.B.Tag426", "s=S.B.Tag427", "s=S.B.Tag428", "s=S.B.Tag429", "s=S.B.Tag430", "s=S.B.Tag431", "s=S.B.Tag432", "s=S.B.Tag433", "s=S.B.Tag434", "s=S.B.Tag435", "s=S.B.Tag436", "s=S.B.Tag437", "s=S.B.Tag438", "s=S.B.Tag439", "s=S.B.Tag440", "s=S.B.Tag441", "s=S.B.Tag442", "s=S.B.Tag443", "s=S.B.Tag444", "s=S.B.Tag445", "s=S.B.Tag446", "s=S.B.Tag447", "s=S.B.Tag448", "s=S.B.Tag449", "s=S.B.Tag450", "s=S.B.Tag451", "s=S.B.Tag452", "s=S.B.Tag453", "s=S.B.Tag454", "s=S.B.Tag455", "s=S.B.Tag456", "s=S.B.Tag457", "s=S.B.Tag458", "s=S.B.Tag459", "s=S.B.Tag460", "s=S.B.Tag461", "s=S.B.Tag462", "s=S.B.Tag463", "s=S.B.Tag464", "s=S.B.Tag465", "s=S.B.Tag466", "s=S.B.Tag467", "s=S.B.Tag468", "s=S.B.Tag469", "s=S.B.Tag470", "s=S.B.Tag471", "s=S.B.Tag472", "s=S.B.Tag473", "s=S.B.Tag474", "s=S.B.Tag475", "s=S.B.Tag476", "s=S.B.Tag477", "s=S.B.Tag478", "s=S.B.Tag479", "s=S.B.Tag480", "s=S.B.Tag481", "s=S.B.Tag482", "s=S.B.Tag483", "s=S.B.Tag484", "s=S.B.Tag485", "s=S.B.Tag486", "s=S.B.Tag487", "s=S.B.Tag488", "s=S.B.Tag489", "s=S.B.Tag490", "s=S.B.Tag491", "s=S.B.Tag492", "s=S.B.Tag493", "s=S.B.Tag494", "s=S.B.Tag495", "s=S.B.Tag496", "s=S.B.Tag497", "s=S.B.Tag498", "s=S.B.Tag499", "s=S.B.Tag500", "s=S.B.Tag501", "s=S.B.Tag502", "s=S.B.Tag503", "s=S.B.Tag504", "s=S.B.Tag505", "s=S.B.Tag506", "s=S.B.Tag507", "s=S.B.Tag508", "s=S.B.Tag509", "s=S.B.Tag510", "s=S.B.Tag511", "s=S.B.Tag512", "s=S.B.Tag513", "s=S.B.Tag514", "s=S.B.Tag515", "s=S.B.Tag516", "s=S.B.Tag517", "s=S.B.Tag518", "s=S.B.Tag519", "s=S.B.Tag520", "s=S.B.Tag521", "s=S.B.Tag522", "s=S.B.Tag523", "s=S.B.Tag524", "s=S.B.Tag525", "s=S.B.Tag526", "s=S.B.Tag527", "s=S.B.Tag528", "s=S.B.Tag529", "s=S.B.Tag530", "s=S.B.Tag531", "s=S.B.Tag532", "s=S.B.Tag533", "s=S.B.Tag534", "s=S.B.Tag535", "s=S.B.Tag536", "s=S.B.Tag537", "s=S.B.Tag538", "s=S.B.Tag539", "s=S.B.Tag540", "s=S.B.Tag541", "s=S.B.Tag542", "s=S.B.Tag543", "s=S.B.Tag544", "s=S.B.Tag545", "s=S.B.Tag546", "s=S.B.Tag547", "s=S.B.Tag548", "s=S.B.Tag549", "s=S.B.Tag550", "s=S.B.Tag551", "s=S.B.Tag552", "s=S.B.Tag553", "s=S.B.Tag554", "s=S.B.Tag555", "s=S.B.Tag556", "s=S.B.Tag557", "s=S.B.Tag558", "s=S.B.Tag559", "s=S.B.Tag560", "s=S.B.Tag561", "s=S.B.Tag562", "s=S.B.Tag563", "s=S.B.Tag564", "s=S.B.Tag565", "s=S.B.Tag566", "s=S.B.Tag567", "s=S.B.Tag568", "s=S.B.Tag569", "s=S.B.Tag570", "s=S.B.Tag571", "s=S.B.Tag572", "s=S.B.Tag573", "s=S.B.Tag574", "s=S.B.Tag575", "s=S.B.Tag576", "s=S.B.Tag577", "s=S.B.Tag578", "s=S.B.Tag579", "s=S.B.Tag580", "s=S.B.Tag581", "s=S.B.Tag582", "s=S.B.Tag583", "s=S.B.Tag584", "s=S.B.Tag585", "s=S.B.Tag586", "s=S.B.Tag587", "s=S.B.Tag588", "s=S.B.Tag589", "s=S.B.Tag590", "s=S.B.Tag591", "s=S.B.Tag592", "s=S.B.Tag593", "s=S.B.Tag594", "s=S.B.Tag595", "s=S.B.Tag596", "s=S.B.Tag597", "s=S.B.Tag598", "s=S.B.Tag599", "s=S.B.Tag600", "s=S.B.Tag601", "s=S.B.Tag602", "s=S.B.Tag603", "s=S.B.Tag604", "s=S.B.Tag605", "s=S.B.Tag606", "s=S.B.Tag607", "s=S.B.Tag608", "s=S.B.Tag609", "s=S.B.Tag610", "s=S.B.Tag611", "s=S.B.Tag612", "s=S.B.Tag613", "s=S.B.Tag614", "s=S.B.Tag615", "s=S.B.Tag616", "s=S.B.Tag617", "s=S.B.Tag618", "s=S.B.Tag619", "s=S.B.Tag620", "s=S.B.Tag621", "s=S.B.Tag622", "s=S.B.Tag623", "s=S.B.Tag624", "s=S.B.Tag625", "s=S.B.Tag626", "s=S.B.Tag627", "s=S.B.Tag628", "s=S.B.Tag629", "s=S.B.Tag630", "s=S.B.Tag631", "s=S.B.Tag632", "s=S.B.Tag633", "s=S.B.Tag634", "s=S.B.Tag635", "s=S.B.Tag636", "s=S.B.Tag637", "s=S.B.Tag638", "s=S.B.Tag639", "s=S.B.Tag640", "s=S.B.Tag641", "s=S.B.Tag642", "s=S.B.Tag643", "s=S.B.Tag644", "s=S.B.Tag645", "s=S.B.Tag646", "s=S.B.Tag647", "s=S.B.Tag648", "s=S.B.Tag649", "s=S.B.Tag650", "s=S.B.Tag651", "s=S.B.Tag652", "s=S.B.Tag653", "s=S.B.Tag654", "s=S.B.Tag655", "s=S.B.Tag656", "s=S.B.Tag657", "s=S.B.Tag658", "s=S.B.Tag659", "s=S.B.Tag660", "s=S.B.Tag661", "s=S.B.Tag662", "s=S.B.Tag663", "s=S.B.Tag664", "s=S.B.Tag665", "s=S.B.Tag666", "s=S.B.Tag667", "s=S.B.Tag668", "s=S.B.Tag669", "s=S.B.Tag670", "s=S.B.Tag671", "s=S.B.Tag672", "s=S.B.Tag673", "s=S.B.Tag674", "s=S.B.Tag675", "s=S.B.Tag676", "s=S.B.Tag677", "s=S.B.Tag678", "s=S.B.Tag679", "s=S.B.Tag680", "s=S.B.Tag681", "s=S.B.Tag682", "s=S.B.Tag683", "s=S.B.Tag684", "s=S.B.Tag685", "s=S.B.Tag686", "s=S.B.Tag687", "s=S.B.Tag688", "s=S.B.Tag689", "s=S.B.Tag690", "s=S.B.Tag691", "s=S.B.Tag692", "s=S.B.Tag693", "s=S.B.Tag694", "s=S.B.Tag695", "s=S.B.Tag696", "s=S.B.Tag697", "s=S.B.Tag698", "s=S.B.Tag699", "s=S.B.Tag700", "s=S.B.Tag701", "s=S.B.Tag702", "s=S.B.Tag703", "s=S.B.Tag704", "s=S.B.Tag705", "s=S.B.Tag706", "s=S.B.Tag707", "s=S.B.Tag708", "s=S.B.Tag709", "s=S.B.Tag710", "s=S.B.Tag711", "s=S.B.Tag712", "s=S.B.Tag713", "s=S.B.Tag714", "s=S.B.Tag715", "s=S.B.Tag716", "s=S.B.Tag717", "s=S.B.Tag718", "s=S.B.Tag719", "s=S.B.Tag720", "s=S.B.Tag721", "s=S.B.Tag722", "s=S.B.Tag723", "s=S.B.Tag724", "s=S.B.Tag725", "s=S.B.Tag726", "s=S.B.Tag727", "s=S.B.Tag728", "s=S.B.Tag729", "s=S.B.Tag730", "s=S.B.Tag731", "s=S.B.Tag732", "s=S.B.Tag733", "s=S.B.Tag734", "s=S.B.Tag735", "s=S.B.Tag736", "s=S.B.Tag737", "s=S.B.Tag738", "s=S.B.Tag739", "s=S.B.Tag740", "s=S.B.Tag741", "s=S.B.Tag742", "s=S.B.Tag743", "s=S.B.Tag744", "s=S.B.Tag745", "s=S.B.Tag746", "s=S.B.Tag747", "s=S.B.Tag748", "s=S.B.Tag749", "s=S.B.Tag750", "s=S.B.Tag751", "s=S.B.Tag752", "s=S.B.Tag753", "s=S.B.Tag754", "s=S.B.Tag755", "s=S.B.Tag756", "s=S.B.Tag757", "s=S.B.Tag758", "s=S.B.Tag759", "s=S.B.Tag760", "s=S.B.Tag761", "s=S.B.Tag762", "s=S.B.Tag763", "s=S.B.Tag764", "s=S.B.Tag765", "s=S.B.Tag766", "s=S.B.Tag767", "s=S.B.Tag768", "s=S.B.Tag769", "s=S.B.Tag770", "s=S.B.Tag771", "s=S.B.Tag772", "s=S.B.Tag773", "s=S.B.Tag774", "s=S.B.Tag775", "s=S.B.Tag776", "s=S.B.Tag777", "s=S.B.Tag778", "s=S.B.Tag779", "s=S.B.Tag780", "s=S.B.Tag781", "s=S.B.Tag782", "s=S.B.Tag783", "s=S.B.Tag784", "s=S.B.Tag785", "s=S.B.Tag786", "s=S.B.Tag787", "s=S.B.Tag788", "s=S.B.Tag789", "s=S.B.Tag790", "s=S.B.Tag791", "s=S.B.Tag792", "s=S.B.Tag793", "s=S.B.Tag794", "s=S.B.Tag795", "s=S.B.Tag796", "s=S.B.Tag797", "s=S.B.Tag798", "s=S.B.Tag799", "s=S.B.Tag800", "s=S.B.Tag801", "s=S.B.Tag802", "s=S.B.Tag803", "s=S.B.Tag804", "s=S.B.Tag805", "s=S.B.Tag806", "s=S.B.Tag807", "s=S.B.Tag808", "s=S.B.Tag809", "s=S.B.Tag810", "s=S.B.Tag811", "s=S.B.Tag812", "s=S.B.Tag813", "s=S.B.Tag814", "s=S.B.Tag815", "s=S.B.Tag816", "s=S.B.Tag817", "s=S.B.Tag818", "s=S.B.Tag819", "s=S.B.Tag820", "s=S.B.Tag821", "s=S.B.Tag822", "s=S.B.Tag823", "s=S.B.Tag824", "s=S.B.Tag825", "s=S.B.Tag826", "s=S.B.Tag827", "s=S.B.Tag828", "s=S.B.Tag829", "s=S.B.Tag830", "s=S.B.Tag831", "s=S.B.Tag832", "s=S.B.Tag833", "s=S.B.Tag834", "s=S.B.Tag835", "s=S.B.Tag836", "s=S.B.Tag837", "s=S.B.Tag838", "s=S.B.Tag839", "s=S.B.Tag840", "s=S.B.Tag841", "s=S.B.Tag842", "s=S.B.Tag843", "s=S.B.Tag844", "s=S.B.Tag845", "s=S.B.Tag846", "s=S.B.Tag847", "s=S.B.Tag848", "s=S.B.Tag849", "s=S.B.Tag850", "s=S.B.Tag851", "s=S.B.Tag852", "s=S.B.Tag853", "s=S.B.Tag854", "s=S.B.Tag855", "s=S.B.Tag856", "s=S.B.Tag857", "s=S.B.Tag858", "s=S.B.Tag859", "s=S.B.Tag860", "s=S.B.Tag861", "s=S.B.Tag862", "s=S.B.Tag863", "s=S.B.Tag864", "s=S.B.Tag865", "s=S.B.Tag866", "s=S.B.Tag867", "s=S.B.Tag868", "s=S.B.Tag869", "s=S.B.Tag870", "s=S.B.Tag871", "s=S.B.Tag872", "s=S.B.Tag873", "s=S.B.Tag874", "s=S.B.Tag875", "s=S.B.Tag876", "s=S.B.Tag877", "s=S.B.Tag878", "s=S.B.Tag879", "s=S.B.Tag880", "s=S.B.Tag881", "s=S.B.Tag882", "s=S.B.Tag883", "s=S.B.Tag884", "s=S.B.Tag885", "s=S.B.Tag886", "s=S.B.Tag887", "s=S.B.Tag888", "s=S.B.Tag889", "s=S.B.Tag890", "s=S.B.Tag891", "s=S.B.Tag892", "s=S.B.Tag893", "s=S.B.Tag894", "s=S.B.Tag895", "s=S.B.Tag896", "s=S.B.Tag897", "s=S.B.Tag898", "s=S.B.Tag899", "s=S.B.Tag900", "s=S.B.Tag901", "s=S.B.Tag902", "s=S.B.Tag903", "s=S.B.Tag904", "s=S.B.Tag905", "s=S.B.Tag906", "s=S.B.Tag907", "s=S.B.Tag908", "s=S.B.Tag909", "s=S.B.Tag910", "s=S.B.Tag911", "s=S.B.Tag912", "s=S.B.Tag913", "s=S.B.Tag914", "s=S.B.Tag915", "s=S.B.Tag916", "s=S.B.Tag917", "s=S.B.Tag918", "s=S.B.Tag919", "s=S.B.Tag920", "s=S.B.Tag921", "s=S.B.Tag922", "s=S.B.Tag923", "s=S.B.Tag924", "s=S.B.Tag925", "s=S.B.Tag926", "s=S.B.Tag927", "s=S.B.Tag928", "s=S.B.Tag929", "s=S.B.Tag930", "s=S.B.Tag931", "s=S.B.Tag932", "s=S.B.Tag933", "s=S.B.Tag934", "s=S.B.Tag935", "s=S.B.Tag936", "s=S.B.Tag937", "s=S.B.Tag938", "s=S.B.Tag939", "s=S.B.Tag940", "s=S.B.Tag941", "s=S.B.Tag942", "s=S.B.Tag943", "s=S.B.Tag944", "s=S.B.Tag945", "s=S.B.Tag946", "s=S.B.Tag947", "s=S.B.Tag948", "s=S.B.Tag949", "s=S.B.Tag950", "s=S.B.Tag951", "s=S.B.Tag952", "s=S.B.Tag953", "s=S.B.Tag954", "s=S.B.Tag955", "s=S.B.Tag956", "s=S.B.Tag957", "s=S.B.Tag958", "s=S.B.Tag959", "s=S.B.Tag960", "s=S.B.Tag961", "s=S.B.Tag962", "s=S.B.Tag963", "s=S.B.Tag964", "s=S.B.Tag965", "s=S.B.Tag966", "s=S.B.Tag967", "s=S.B.Tag968", "s=S.B.Tag969", "s=S.B.Tag970", "s=S.B.Tag971", "s=S.B.Tag972", "s=S.B.Tag973", "s=S.B.Tag974", "s=S.B.Tag975", "s=S.B.Tag976", "s=S.B.Tag977", "s=S.B.Tag978", "s=S.B.Tag979", "s=S.B.Tag980", "s=S.B.Tag981", "s=S.B.Tag982", "s=S.B.Tag983", "s=S.B.Tag984", "s=S.B.Tag985", "s=S.B.Tag986", "s=S.B.Tag987", "s=S.B.Tag988", "s=S.B.Tag989", "s=S.B.Tag990", "s=S.B.Tag991", "s=S.B.Tag992", "s=S.B.Tag993", "s=S.B.Tag994", "s=S.B.Tag995", "s=S.B.Tag996", "s=S.B.Tag997", "s=S.B.Tag998", "s=S.B.Tag999", "s=S.B.Tag1000"]

    # Set to enable storing a list of created assets/timeseries to local litedb.
    # Requires the StateStorage.Location property to be set.
    # If this is left empty, metadata will have to be read each time the extractor restarts.
    # Default is empty
 #   local-state:
    # Timestamp in ms since epoch to invalidate stored mqtt states.
    # On extractor restart, assets/timeseries created before this will be attempted re-created in CDF.
    # They will not be deleted or updated.
 #   invalidate-before: 0
    # Replace all instances of NaN, Infinity or values greater than 1E100 with this floating point number. If left empty, ignore instead.
 #   non-finite-replacement:
    # Do not push any metadata at all. If this is true, plain timeseries without metadata will be created,
    # similarly to raw-metadata, and datapoints will be pushed. Nothing will be written to raw, and no assets will be created.
    # Events will be created, but without asset context.
 #   skip-metadata: false
    # Default empty. Store assets and/or timeseries data in raw. Assets will not be created at all,
    # timeseries will be created with just externalId, isStep and isString.
    # Both timeseries and assets will be persisted in their entirety to raw.
    # Datapoints are not affected, events will be created, but without asset context. The externalId
    # of the source node is added to metadata if applicable.
    # Use different table names for assets and timeseries.
 #   raw-metadata:
        # Database to store data in, required.
 #       database:
        # Table to store assets in.
 #       assets-table:
        # Table to store timeseries in.
 #       timeseries-table:
        # Table to store relationships in
 #       relationships-table:
    # Map metadata to asset/timeseries attributes. Each of "assets" and "timeseries" is a map from property DisplayName to
    # CDF attribute. Legal attributes are "name, description, parentId" and "unit" for timeseries. "parentId" must somehow refer to
    # an existing asset. For timeseries it must be a mapped asset, for assets it can be any asset.
    # Example usage:
    # timeseries:
    #    "EngineeringUnits": "unit"
    #    "EURange": "description"
    # assets:
    #    "Name": "name"
#    metadata-mapping:
#        assets:
#        timeseries:

    # If relationships are eneabled, and written to clean, and deletes are enabled. This needs to be set to
    # true in order to hard delete the relationships.
    #delete-relationships: false