{
    "$id": "extraction_config.schema.json",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "description": "Configuration for general extraction options, such as data types, mapping, and filters.",
    "$extraDescription": "### External ID generation\nIDs used in OPC UA are special `nodeId` objects with an identifier and a namespace that must be converted to a string before they are written to CDF. A direct conversion, however, has several potential problems.\n * The namespace index is by default part of the node, but it may change between server restarts. Only the namespace itself is fixed.\n * The namespace table may be modified, in which case all old node IDs are invalidated.\n * Node IDs are not unique between different OPC UA servers.\n * Node identifiers can be duplicated accross namespaces.\n\n The solution is to create a node ID on the following form:\n ```[id-prefix][namespace][identifierType]=[identifier as string]([optional array index])```.\nFor example, the node with node ID `ns=1;i=123` with ID prefix `gp:` would be mapped to `gp:http://my.namespace.url:i=123`.\n\nYou can optionally override this behavior for individual nodes by using `node-map`(#extraction.node-map).",
    "unevaluatedProperties": false,
    "properties": {
        "id-prefix": {
            "type": "string",
            "description": "Global prefix for `externalId`s in destinations. Should be unique for each extractor deployment to prevent name conflicts."
        },
        "root-node": {
            "$ref": "proto_node_id.schema.json",
            "description": "Root node. Defaults to the Objects node",
            "default": {
                "node-id": "i=86"
            }
        },
        "root-nodes": {
            "type": "array",
            "description": "List of root nodes. The extractor will start exploring from these. Specifying nodes connected with hierarchical references can result in some strange behavior and should be avoided",
            "uniqueItems": true,
            "items": {
                "$ref": "proto_node_id.schema.json",
                "description": "Root node."
            }
        },
        "node-map": {
            "type": "object",
            "description": "Map from external IDs to OPC UA node IDs. This can, for example, be used to place the node hierarchy as a child of a specific asset in the asset hierarchy.",
            "unevaluatedProperties": false,
            "patternProperties": {
                ".*": {
                    "$ref": "proto_node_id.schema.json",
                    "description": "Target node ID for mapping external ID."
                }
            }
        },
        "namespace-map": {
            "type": "object",
            "description": "Map OPC-UA namespaces to prefixes in CDF. If not mapped, the full namespace URI is used. This saves space compared to using the full URI, and might make IDs more readable.",
            "unevaluatedProperties": false,
            "patternProperties": {
                ".*": {
                    "type": "string",
                    "description": "Namespace URI to map."
                }
            }
        },
        "auto-rebrowse-period": {
            "type": "string",
            "description": "Time in minutes between each automatic re-browse of the node hierarchy. Format is as given in [Timestamps and intervals](#timestamps-and-intervals), this option accepts cron expressions. Set this to `0` to disable automatic re-browsing of the server.",
            "default": "0m"
        },
        "enable-audit-discovery": {
            "type": "boolean",
            "description": "Enable this to make the extractor listen to `AuditAddNodes` and `AuditAddReferences` events from the server, and use that to identify when new nodes are added to the server. This is more efficient than browsing the node hierarchy, but does not work with data models and requires that the server supports auditing.",
            "default": false
        },
        "data-push-delay": {
            "type": "string",
            "description": "Time between each push to destinations. Format is as given in [Timestamps and intervals](#timestamps-and-intervals).",
            "default": "1s"
        },
        "update": {
            "type": "object",
            "description": "Update data in destinations on re-browse or restart. Set `auto-rebrowse-period` to do this periodically.",
            "unevaluatedProperties": false,
            "properties": {
                "objects": {
                    "$ref": "type-update-config",
                    "description": "Configuration for updating objects and object types."
                },
                "variables": {
                    "$ref": "type-update-config",
                    "description": "Configuration for updating variables and variable types."
                }
            }
        },
        "data-types": {
            "$ref": "data-type-config"
        },
        "relationships": {
            "type": "object",
            "description": "Map OPC UA references to relationships in CDF, or edges in CDF data models. Generated relationships will have external ID on the form `[prefix][reference type];[source][target]`\n\nOnly relationships between mapped nodes are extracted.",
            "unevaluatedProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable mapping OPC-UA references to relationships in CDF",
                    "default": false
                },
                "hierarchical": {
                    "type": "boolean",
                    "description": "Set to `true` to enable also mapping the hierarchical references over. These are normally mapped to `assetId`/`parentId` relations in CDF, but when doing that the type of the reference is lost. Requires `enabled` to be `true`.",
                    "default": false
                },
                "inverse-hierarchical": {
                    "type": "boolean",
                    "description": "Set to `true` to create inverse relationships for each fo the hierarchical references. For efficiency these are not read, but inferred from forward references. Does nothing if `hierarchical` is `false`.",
                    "default": false
                }
            },
            "required": [
                "enabled"
            ]
        },
        "node-types": {
            "type": "object",
            "description": "Configuration for mapping OPC UA types to CDF in some way.",
            "unevaluatedProperties": false,
            "properties": {
                "metadata": {
                    "type": "boolean",
                    "description": "Add the `TypeDefinition` as a metadata field to all objects and variables."
                },
                "as-nodes": {
                    "type": "boolean",
                    "description": "Allow reading object- and variable types as normal nodes and map them to assets or data model nodes in CDF. They will need to be in the mapped hierarchy, so you will need to add a root node that they are descended from."
                }
            }
        },
        "map-variable-children": {
            "type": "boolean",
            "description": "Set to `true` to make the extractor read children of variables and potentially map those to timeseries as well.",
            "default": false
        },
        "transformations": {
            "type": "array",
            "description": "A list of transformations to be applied to the source nodes before pushing. Transformations are applied sequentially, so it can help performance to put `Ignore` filters first, and `TimeSeries` filters can undo `Property` transformations.",
            "uniqueItems": true,
            "items": {
                "type": "object",
                "unevaluatedProperties": false,
                "description": "A single transformation.",
                "examples": [
                    {
                        "filter": {
                            "name": "Cognite$",
                            "nodeClass": "Object"
                        },
                        "type": "Include"
                    }
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Transformation type. `Ignore` ignores the node and all descendants, `DropSubscriptions` prevents the extractor from subscribing to this node, `Property` converts time series and their descendants into metadata, `TimeSeries` converts metadata into time series, `DropSubscriptions` prevents the extractor from subscribing to events or data points on matching nodes, `AsEvents` turns time series data points into events, `Include` inverts an ignore filter. If any `Include` filter is present, all nodes are ignored by default.",
                        "enum": [
                            "Ignore",
                            "DropSubscriptions",
                            "Property",
                            "TimeSeries",
                            "AsEvents",
                            "Include"
                        ]
                    },
                    "filter": {
                        "$ref": "raw-node-filter",
                        "description": "Filter to match. All non-null filters must match each node for the transformation to be applied."
                    }
                }
            }
        },
        "deletes": {
            "type": "object",
            "description": "Configure soft deletes. When this is enabled, all read nodes are written to a state store after browse, and nodes that are missing on subsequent browses are marked as deleted from CDF, with a configurable marker. A notable exception is relationships in CDF, which has no metadata, so these are hard deleted if [`cognite.delete-relationships`](#cognite) is enabled.",
            "unevaluatedProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set this to `true` to enable deletes. This requires [`state-storage`](#state-storage) to be configured."
                },
                "delete-marker": {
                    "type": "string",
                    "description": "Name of marker used to indicate that a node is deleted. Added to metadata, or as a column in Raw.",
                    "default": "deleted"
                }
            }
        },
        "status-codes": {
            "type": "object",
            "unevaluatedProperties": false,
            "description": "Configuration for ingesting status codes to CDF timeseries.",
            "properties": {
                "status-codes-to-ingest": {
                    "type": "string",
                    "enum": [
                        "GoodOnly",
                        "Uncertain",
                        "All"
                    ],
                    "description": "Which data points to ingest to CDF. `All` ingests all datapoints, including bad. `Uncertain` ingests good and uncertain data points. `GoodOnly` ingest only good datapoints.",
                    "default": "GoodOnly"
                },
                "ingest-status-codes": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to ingest status codes into the time series API."
                }
            }
        },
        "rebrowse-triggers": {
            "type": "object",
            "unevaluatedProperties": false,
            "description": "Configuration for triggering rebrowse based on changes to specific nodes.",
            "properties": {
                "namespace-publication-date": {
                    "type": "boolean",
                    "description": "Indicate if the extractor should subscribe to namespacePublicationDate on the Server node.",
                    "default": false
                },
                "namespaces": {
                    "type": "array",
                    "description": "A list of namespace URIs used to filter which `namespace publication data` nodes the extractor will subscribe to.",
                    "items": {
                        "type": "string",
                        "description": "A namespace URI."
                    }
                }
            }
        }
    },
    "$defs": {
        "type-update-config": {
            "type": "object",
            "$id": "type-update-config",
            "unevaluatedProperties": false,
            "properties": {
                "description": {
                    "type": "boolean",
                    "description": "Set to `true` to update description"
                },
                "context": {
                    "type": "boolean",
                    "description": "Set to `true` to update context, i.e. the position of the node in the node hierarchy"
                },
                "metadata": {
                    "type": "boolean",
                    "description": "Set to `true` to update metadata, including fields like `unit`."
                },
                "name": {
                    "type": "boolean",
                    "description": "Set to `true` to update name."
                }
            }
        },
        "proto-data-type": {
            "type": "object",
            "$id": "proto-data-type",
            "unevaluatedProperties": false,
            "description": "Definition of an OPC UA data type.",
            "properties": {
                "node-id": {
                    "$ref": "proto_node_id.schema.json",
                    "description": "Node ID of the data type"
                },
                "is-step": {
                    "type": "boolean",
                    "description": "Set to `true` if is-step should be set on timeseries in CDF",
                    "default": false
                },
                "enum": {
                    "type": "boolean",
                    "description": "Set to `true` if this is data type is an enumeration",
                    "default": false
                }
            }
        },
        "data-type-config": {
            "type": "object",
            "$id": "data-type-config",
            "unevaluatedProperties": false,
            "description": "Configuration related to how data types and arrays should be handled by the OPC UA extractor.",
            "properties": {
                "custom-numeric-types": {
                    "type": "array",
                    "description": "Set a list of manually defined numeric OPC UA data types. This can be used to make custom types be treated as numbers. Conversion from the actual returned values is done using the `C#` `Convert` functionality. If no valid conversion exists, this will fail.",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "proto-data-type"
                    }
                },
                "ignore-data-types": {
                    "type": "array",
                    "description": "List of node IDs of data types that should not be extracted to CDF. Time series with one of these data types are not extracted.",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "proto_node_id.schema.json"
                    }
                },
                "unknown-as-scalar": {
                    "type": "boolean",
                    "description": "Assume non-specific `ValueRanks` in OPC UA (`ScalarOrOneDimension` or `Any`) are scalar if they do not have an `ArrayDimensions` attribute. If such a variable produces an array, only the first element will be extracted."
                },
                "max-array-size": {
                    "type": "integer",
                    "description": "Maximum length of arrays mapped to CDF, if this is set to 0, only scalar variables are mapped. Set this to `-1` to indicate that there is no upper limit.\n\n WARNING: If you set this to `-1`, and encounter a very large array, such as an image, the extractor might create hundreds of thousands of time series in CDF.\n\nIn general, extracting arrays require variables to have an `ArrayDimensions` attribute with length equal to 1. See `estimate-array-sizes` for workarounds."
                },
                "allow-string-variables": {
                    "type": "boolean",
                    "description": "Set to `true` to allow fetching string-typed variables. This means that all variables with a non-numeric type is converted to string."
                },
                "auto-identify-types": {
                    "type": "boolean",
                    "description": "Map out the data type hierarchy before starting. This is useful if there are custom numeric types, or any enum types are used. This must be enabled for enum metadata and `enums-as-strings` to work. If this is false, any custom numeric types have to be added manually."
                },
                "enums-as-strings": {
                    "type": "boolean",
                    "description": "If this is `false` and `auto-identify-types` is `true`, or there are manually added enums in `custom-numeric-types`, enums will be mapped to numeric time series, and labels are added as metadata fields.\n\nIf this is `true`, labels are not mapped to metadata, and enums will be mapped to string time series with values equal to mapped label values."
                },
                "data-type-metadata": {
                    "type": "boolean",
                    "description": "Add a metadata property `dataType`, which contains the node ID of the OPC-UA data type."
                },
                "null-as-numeric": {
                    "type": "boolean",
                    "description": "Set this to `true` to treat `null` node IDs as numeric instead of ignoring them. Note that `null` node IDs violate the OPC UA standard."
                },
                "expand-node-ids": {
                    "type": "boolean",
                    "description": "Add attributes such as `NodeId`, `ParentNodeId`, and `TypeDefinitionId` to nodes written to CDF Raw as full node IDs with reversible encoding."
                },
                "append-internal-values": {
                    "type": "boolean",
                    "description": "Add attributes generally used internally like `AccessLevel`, `Historizing`, `ArrayDimensions`, and `ValueRank` to data pushed to CDF Raw."
                },
                "estimate-array-sizes": {
                    "type": "boolean",
                    "description": "If `max-array-size` is set, this looks for the `MaxArraySize` property on each node with `one-dimensional` ValueRank. If it is not found, the extractor tries to read the value of the node, and look at the current array length.\n\n`ArrayDimensions` is still the preferred way to identify array sizes, this is not guaranteed to generate reasonable or useful values."
                }
            }
        },
        "raw-node-filter": {
            "type": "object",
            "$id": "raw-node-filter",
            "unevaluatedProperties": false,
            "properties": {
                "name": {
                    "$ref": "field-filter",
                    "description": "Regex or list of values matching node `DisplayName`."
                },
                "description": {
                    "$ref": "field-filter",
                    "description": "Regex or list of values matching node `Description`."
                },
                "id": {
                    "$ref": "field-filter",
                    "description": "Regex or list of values matching node ID. IDs on the form `i=123` or `s=string` are matched."
                },
                "is-array": {
                    "type": "boolean",
                    "description": "Match on whether a node is an array. If this is set to `true` or `false`, the filter will only match variables."
                },
                "namespace": {
                    "$ref": "field-filter",
                    "description": "Regex or list of values matching the full namespace of the node ID."
                },
                "type-definition": {
                    "$ref": "field-filter",
                    "description": "Regex or list of values matching the node ID of the type definition. On the form `i=123` or `s=string`."
                },
                "historizing": {
                    "type": "boolean",
                    "description": "Whether the node is historizing. If this is set, the filter will only match variables."
                },
                "node-class": {
                    "type": "string",
                    "description": "The OPC UA node class, exact match.",
                    "enum": [
                        "Object",
                        "ObjectType",
                        "Variable",
                        "VariableType",
                        "DataType",
                        "ReferenceType"
                    ]
                },
                "parent": {
                    "$ref": "raw-node-filter",
                    "description": "Another filter instance which is applied to the parent node."
                }
            }
        },
        "field-filter": {
            "$id": "field-filter",
            "oneOf": [
                {
                    "type": "object",
                    "unevaluatedProperties": false,
                    "title": "File",
                    "description": "Match field exactly from a list of values read from a local file",
                    "properties": {
                        "file": {
                            "type": "string",
                            "description": "Path to a local file containing a new-line separated list of values."
                        }
                    }
                },
                {
                    "type": "array",
                    "title": "Values",
                    "description": "Match field exactly from a list of values",
                    "items": {
                        "type": "string",
                        "description": "Value to match"
                    }
                },
                {
                    "type": "string",
                    "title": "Regex",
                    "description": "Regex on the value."
                }
            ]
        }
    }
}