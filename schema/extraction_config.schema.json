{
    "$id": "extraction_config.schema.json",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "description": "Configuration for how metadata should be extracted from the server, and generally about the startup phase of the extractor",
    "unevaluatedProperties": false,
    "properties": {
        "id-prefix": {
            "type": "string",
            "description": "Global prefix for `externalId`s in destinations. Should be unique to prevent name conflicts. The generated `externalId` is on the form `[id-prefix][namespace][identifier]`"
        },
        "ignore-name-prefix": {
            "type": "array",
            "description": "DEPRECATED. Specify a list of prefixes on `DisplayName` to ignore",
            "deprecated": true,
            "items": {
                "type": "string",
                "description": "`DisplayName` prefix"
            }
        },
        "ignore-name": {
            "type": "array",
            "description": "DEPRECATED. Specify a list `DisplayName`s to ignore",
            "deprecated": true,
            "items": {
                "type": "string",
                "description": "`DisplayName` to ignore"
            }
        },
        "root-node": {
            "$ref": "proto_node_id.schema.json",
            "description": "Root node. Defaults to the Objects node",
            "default": {
                "node-id": "i=86"
            }
        },
        "root-nodes": {
            "type": "array",
            "description": "List of root nodes. The extractor will start exploring from these. Specifying nodes connected with hierarchical references can result in some strange behavior and should be avoided",
            "uniqueItems": true,
            "items": {
                "$ref": "proto_node_id.schema.json",
                "description": "Root node. Defaults to the Objects node",
                "default": {
                    "node-id": "i=86"
                }
            }
        },
        "node-map": {
            "type": "object",
            "description": "Override mappings between OPC-UA node ids and externalIds, allowing e.g. the `root-node` to be mapped to a particular asset in CDF. Applies to all `externalId`s",
            "unevaluatedProperties": false,
            "patternProperties": {
                ".*": {
                    "$ref": "proto_node_id.schema.json"
                }
            }
        },
        "namespace-map": {
            "type": "object",
            "description": "Map OPC-UA namespaces to prefixes in CDF. If not mapped, the full namespace URI is used. This saves space compared to using the full URI, and might make ids more readable",
            "unevaluatedProperties": false,
            "patternProperties": {
                ".*": {
                    "type": "string",
                    "description": "Mapped namespace uri"
                }
            }
        },
        "auto-rebrowse-period": {
            "type": "string",
            "description": "Time in minutes between each callto browse the OPC-UA node hierarchy, then push nodes to destinations. Note that this is a heavy operation, so this number should not be set too low. Format is `N[timeunit]` where `timeunit` is one of `w`, `d`, `h`, `m`, `s`, or `ms`. You can also use a cron expression on the form `[minute] [hour] [day of month] [month] [day of week]`",
            "default": "0m"
        },
        "enable-audit-discovery": {
            "type": "boolean",
            "description": "Enable using audit events to discover new nodes on the server. If this is set to true, the client will expect `AuditAddNodes` or `AuditAddReferences` events on the server node. These will be used to add new nodes automatically be recursively browsing from each node mentioned in the event"
        },
        "data-push-delay": {
            "type": "string",
            "description": "Delay between each push of data points to targets. Format is `N[timeunit]` where `timeunit` is one of `w`, `d`, `h`, `m`, `s`, or `ms`",
            "default": "1000ms"
        },
        "update": {
            "type": "object",
            "description": "Update data in destinations on rebrowse or restart. Set `auto-rebrowse-period` to some value to do this periodically. `Context` here refers to the structure of the node graph in OPC-UA, i.e. hierarchical references. `Metadata` refers to any information obtained from OPC-UA properties. Enabling anything here will increase the startup and rebrowse-time of the extractor",
            "unevaluatedProperties": false,
            "properties": {
                "objects": {
                    "$ref": "type-update-config",
                    "description": "Configuration for updating objects and object types"
                },
                "variables": {
                    "$ref": "type-update-config",
                    "description": "Configuration for updating variables and variable types"
                }
            }
        },
        "data-types": {
            "$ref": "data-type-config"
        },
        "property-name-filter": {
            "type": "string",
            "deprecated": true,
            "description": "DEPRECATED. Regex filter on DisplayName to treat variables as properties"
        },
        "property-id-filter": {
            "type": "string",
            "deprecated": true,
            "description": "DEPRECATED. Regex filter on NodeId to treat variables as properties"
        },
        "relationships": {
            "type": "object",
            "description": "Configuration for translating OPC-UA references to relationships in CDF",
            "unevaluatedProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "`true` to enable mapping OPC-UA references to relationships in CDF"
                },
                "hierarchical": {
                    "type": "boolean",
                    "description": "`true` to enable also mapping the hierarchical references over. These are normally mapped to `assetId`/`parentId` relations in CDF, but when doing that the type of the reference is lost. Requires `enabled` to be `true`"
                },
                "inverse-hierarchical": {
                    "type": "boolean",
                    "description": "`true` to create inverse relationships for each fo the hierarchical references. For efficiency these are not read, but inferred from forward references. Does nothing if `hierarchical` is `false`"
                }
            }
        },
        "node-types": {
            "type": "object",
            "description": "Configuration for reading OPC-UA node types",
            "unevaluatedProperties": false,
            "properties": {
                "metadata": {
                    "type": "boolean",
                    "description": "Add the `TypeDefinition` as a metadata field to all nodes"
                },
                "as-nodes": {
                    "type": "boolean",
                    "description": "Allow reading object- and variable types as normal nodes and map them to destinations. They will need to be in the mapped hierarchy, so you will need to add a root node that they are descended from."
                }
            }
        },
        "map-variable-children": {
            "type": "boolean",
            "description": "If `true`, the extractor will try reading children of variables and map those to timeseries as well"
        },
        "transformations": {
            "type": "array",
            "description": "A list of transformations to be applied to the source nodes before pushing. The possible transformations are `Ignore`, `Property`, `DropSubscriptions`, `TimeSeries`. For efficiency put `Ignore` filters first. This is also worth noting when it comes to `TimeSeries` transformations, which can undo `Property` transformations",
            "uniqueItems": true,
            "items": {
                "type": "object",
                "unevaluatedProperties": false,
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Transformation type. `Ignore` ignores the node and all descendants, `DropSubscriptions` prevents the extractor from subscribing to this node, `Property` converts timeseries and their descendants into metadata, `TimeSeries` converts metadata into timeseries.",
                        "enum": ["Ignore", "DropSubscriptions", "Property", "TimeSeries"]
                    },
                    "filter": {
                        "$ref": "raw-node-filter",
                        "description": "Filter to match. All non-null filters must match each node for the transformation to be applied"
                    }
                }
            }
        }
    },
    "$defs": {
        "type-update-config": {
            "type": "object",
            "$id": "type-update-config",
            "unevaluatedProperties": false,
            "properties": {
                "description": {
                    "type": "boolean",
                    "description": "`true` to update description"
                },
                "context": {
                    "type": "boolean",
                    "description": "`true` to update context, i.e. the position of the node in the node hierarchy"
                },
                "metadata": {
                    "type": "boolean",
                    "description": "`true` to update metadata"
                },
                "name": {
                    "type": "boolean",
                    "description": "`true` to update name"
                }
            }
        },
        "proto-data-type": {
            "type": "object",
            "$id": "proto-data-type",
            "unevaluatedProperties": false,
            "description": "Definition of an OPC-UA data type",
            "properties": {
                "node-id": {
                    "$ref": "proto_node_id.schema.json",
                    "description": "NodeId of the data type"
                },
                "is-step": {
                    "type": "boolean",
                    "description": "True if is-step should be set on timeseries in CDF"
                },
                "enum": {
                    "type": "boolean",
                    "description": "True if this is an enumeration"
                }
            }
        },
        "data-type-config": {
            "type": "object",
            "$id": "data-type-config",
            "unevaluatedProperties": false,
            "description": "Configuration related to how data types are mapped to CDF",
            "properties": {
                "custom-numeric-types": {
                    "type": "array",
                    "description": "Add custom numeric types using ther NodeId. This overwrites default behavior, so it is possible to make the `Integer` data type discrete, even if it is not considered so by default. Note that the type in question needs to have a sensible numerical conversion in C#, unless it is an array type, in which case each element needs a conversion",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "proto-data-type"
                    }
                },
                "ignore-data-types": {
                    "type": "array",
                    "description": "List of NodeIds corresponding to data types that should be ignored. Time series with these data types will not be mapped to destinations",
                    "uniqueItems": true,
                    "items": {
                        "$ref": "proto_node_id.schema.json"
                    }
                },
                "unknown-as-scalar": {
                    "type": "boolean",
                    "description": "Assume imprecise `ValueRanks` without `ArrayDimensions` are all scalar, and create timeseries in destinations accordingly. If such a variable produces an array, only the first element is mapped to CDF"
                },
                "max-array-size": {
                    "type": "integer",
                    "description": "Maximum size of array variables. Only arrays with the `ArrayDimensions` property in OPC-UA will be mapped. Leave this at 0 to only allow scalar values. Note that some server implementations have issues with the `ArrayDimensions` propertiy, so it is not fetched at all if `max-array-size` is 0. -1 indicates that there is no limit to array length, but variables must still be one-dimensional and contain a fixed number of elements."
                },
                "allow-string-variables": {
                    "type": "boolean",
                    "description": "Set to `true` to allow fetching string-typed variables. This means that all variables with a non-numeric type is converted to string."
                },
                "auto-identify-types": {
                    "type": "boolean",
                    "description": "Map out the data type hierarchy before starting. This is useful if there are custom numeric types, or any enum types are used. This must be enabled for enum metadata and `enums-as-strings` to work. If this is false, any custom numeric types have to be added manually"
                },
                "enums-as-strings": {
                    "type": "boolean",
                    "description": "If this is false and `auto-identify-types` is true, or there are manually added enums in `custom-numeric-types`, enums will be mapped to numeric time series, and labels are added as metadata fields. If this is true, labels are not mapped to metadata, and enums will be mapped to string timeseries with values equal to mapped label values"
                },
                "data-type-metadata": {
                    "type": "boolean",
                    "description": "Add a metadata property `dataType`, which contains the id of the OPC-UA data type"
                },
                "null-as-numeric": {
                    "type": "boolean",
                    "description": "Set this to `true` to treat Null NodeIds as numeric instead of string"
                },
                "expand-node-ids": {
                    "type": "boolean",
                    "description": "Add full JSON node-ids to data pushed to Raw"
                },
                "append-internal-values": {
                    "type": "boolean",
                    "description": "Add attributes generally used internally like `AccessLevel`, `Historizing`, `ArrayDimensions`, `ValueRank`, etc. to data pushed to Raw"
                },
                "estimate-array-sizes": {
                    "type": "boolean",
                    "description": "If `max-array-size` is set, this looks for the `MaxArraySize` property on each node with `one-dimensional` ValueRank. If it is not found, the extractor tries to read the value of the node, and look at the current array length. ArrayDimensions is still the preferred way to identify array sizes, this is not guaranteed to generate reasonable or useful values"
                }
            }
        },
        "raw-node-filter": {
            "type": "object",
            "$id": "raw-node-filter",
            "unevaluatedProperties": false,
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Regex on node `DisplayName`"
                },
                "description": {
                    "type": "string",
                    "description": "Regex on node `Description`"
                },
                "id": {
                    "type": "string",
                    "description": "Regex on node id. Ids on the form `i=123` or `s=string` are matched"
                },
                "is-array": {
                    "type": ["boolean", "null"],
                    "description": "Whether the node is an array. If this is set, the filter only considers variables"
                },
                "namespace": {
                    "type": "string",
                    "description": "Regex on the full namespace of the node id"
                },
                "type-definition": {
                    "type": "string",
                    "description": "Regex on the id of the type definition. On the form `i=123` or `s=string`"
                },
                "historizing": {
                    "type": ["boolean", "null"],
                    "description": "Whether the node is historizing. If this is set, the filter only considers variables"
                },
                "node-class": {
                    "type": "string",
                    "description": "The OPC-UA node class, exact match.",
                    "enum": ["Object", "ObjectType", "Variable", "VariableType", "DataType", "ReferenceType"]
                },
                "parent": {
                    "$ref": "raw-node-filter",
                    "description": "Another filter instance which is applied to the parent node"
                }
            }
        },
        "rebrowse-triggers": {
            "type": "object",
            "unevaluatedProperties": false,
            "description": "Configuration for triggering rebrowse based on changes to specific nodes.",
            "properties": {
                "namespace-publication-date": {
                    "type": "boolean",
                    "description": "Indicate if the extractor should subscribe to namespacePublicationDate on the Server node."
                },
                "namespaces": {
                    "type": "array",
                    "description": "A list of namespaces uris used to filter which namespacePublicationDates the extractor will subscribe to.",
                    "items": {
                        "type": "string",
                        "description": "The uri of a namespace."
                    }
                }
            }
        }
    }
}