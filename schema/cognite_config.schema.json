{
    "$id": "cognite_config.schema.json",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "description": "Configuration for pushing data to Cognite Data Fusion (CDF)",
    "allOf": [
        {
            "$ref": "https://raw.githubusercontent.com/cognitedata/dotnet-extractor-utils/v1.19.0/schema/cognite_config.schema.json"
        }
    ],
    "unevaluatedProperties": false,
    "properties": {
        "data-set": {
            "type": "object",
            "unevaluatedProperties": false,
            "description": "Data set used for new time series, assets, events, and relationships. Existing objects will not be updated",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Data set internal ID"
                },
                "external-id": {
                    "type": "string",
                    "description": "Data set external ID"
                }
            },
            "oneOf": [
                {
                    "required": [
                        "id"
                    ]
                },
                {
                    "required": [
                        "external-id"
                    ]
                }
            ]
        },
        "read-extracted-ranges": {
            "type": "boolean",
            "description": "Specifies whether to read start/end-points for datapoints on startup, where possible. It is generally recommended to use the [`state-storage`](#state-storage) instead of this.",
            "default": true
        },
        "metadata-targets": {
            "type": "object",
            "description": "Configure targets for node metadata. This configures which resources other than time series datapoints are created. By default, if this is left out, data is written to assets and time series metadata. Note that this behavior is deprecated, in the future leaving this section out will result in no metadata being written at all.",
            "unevaluatedProperties": false,
            "properties": {
                "raw": {
                    "type": "object",
                    "description": "Write metadata to the CDF staging area (Raw).",
                    "unevaluatedProperties": false,
                    "required": [
                        "database"
                    ],
                    "properties": {
                        "database": {
                            "type": "string",
                            "description": "The CDF Raw database to write to."
                        },
                        "assets-table": {
                            "type": "string",
                            "descripion": "Name of the Raw table to write assets to."
                        },
                        "timeseries-table": {
                            "type": "string",
                            "description": "Name of the Raw table to write time series metadata to."
                        },
                        "relationships-table": {
                            "type": "string",
                            "description": "Name of the Raw table to write relationships metadata to."
                        }
                    }
                },
                "clean": {
                    "unevaluatedProperties": false,
                    "description": "Write metadata to CDF clean, assets, time series, and relationships.",
                    "type": "object",
                    "properties": {
                        "assets": {
                            "type": "boolean",
                            "description": "Set to `true` to enable creating CDF assets from OPC UA nodes."
                        },
                        "timeseries": {
                            "type": "boolean",
                            "description": "Set to `true` to enable adding metadata to CDF time series based on OPC UA properties."
                        },
                        "relationships": {
                            "type": "boolean",
                            "description": "Set to `true` to enable creating relationships from OPC UA references. Requires [`extraction.relationships`](#extraction.relationships) to be enabled."
                        }
                    }
                },
                "data-models": {
                    "unevaluatedProperties": false,
                    "description": "ALPHA: Write metadata to CDF Data Models.\n\nThis will create CDF data models based on the OPC UA type hierarchy, then populate them with data from the OPC UA node hierarchy. Note that this _requires_ [`extraction.relationships.enabled`](#extraction.relationships) and [`extraction.relationships.hierarchical`](#extraction.relationships) to be set to `true`, and there must be exactly one root node with ID `i=84`.\n\nNote that this feature is in _alpha_ there may be changes that require you to delete the data model from CDF, and breaking changes to the configuration schema. These changes will not be considered breaking changes to the extractor.",
                    "type": "object",
                    "required": [
                        "enabled",
                        "model-space",
                        "instance-space",
                        "model-version"
                    ],
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Set this to `true` to enable writing to CDF Data Models."
                        },
                        "model-space": {
                            "type": "string",
                            "description": "Set the space to create data models in. The space will be created if it does not exist."
                        },
                        "instance-space": {
                            "type": "string",
                            "description": "Set the space instances will be created in. The space will be created if it does not exist. May be the same as `model-space`."
                        },
                        "model-version": {
                            "type": "string",
                            "description": "Version used for created data model and all created views."
                        },
                        "types-to-map": {
                            "type": "string",
                            "description": "Configure which types to map to Data Models.\n\n`Referenced` means that only types that are referenced by instance nodes will be created.\n`Custom` means that all types not in the base namespace will be created.\n`All` means that all types will be created.\n\nNote: Setting this to `All` is rarely useful, and may produce impractically large models.",
                            "enum": [
                                "Referenced",
                                "Custom",
                                "All"
                            ],
                            "default": "Custom"
                        },
                        "skip-simple-types": {
                            "type": "boolean",
                            "description": "Do not create views without their own connections or properties. Simplifies the model greatly, but reduces the number of distinct types in your model.",
                            "default": false
                        },
                        "ignore-mandatory": {
                            "type": "boolean",
                            "description": "Let mandatory options be nullable. Many servers do not obey `Mandatory` requirements in their own models, which breaks when they are ingested into CDF, where nullable constraints are enforced.",
                            "default": false
                        },
                        "connection-target-map": {
                            "type": "object",
                            "description": "Target connections on the form `\"Type.Property\": \"Target\"`. This is useful for certain schemas. This overrides the expected type of specific CDF Connections, letting you override incorrect schemas. For example, the published nodeset file for ISA-95 incorrectly states that the `EquipmentClass` reference for `EquipmentType` is an `Object`, while it should be an `ObjectClass`.",
                            "patternProperties": {
                                "[A-z0-9-_.]+": {
                                    "type": "string",
                                    "description": "NodeClass to override connection with.",
                                    "enum": [
                                        "ObjectType",
                                        "Object",
                                        "VariableType",
                                        "Variable",
                                        "ReferenceType",
                                        "DataType",
                                        "View",
                                        "Method"
                                    ]
                                }
                            },
                            "examples": [
                                {
                                    "EquipmentType.EquipmentClass": "ObjectType"
                                }
                            ]
                        },
                        "enable-deletes": {
                            "type": "boolean",
                            "described": "Enable deleting Data Model nodes if deletes are enabled and the node is deleted in the source. This will only delete nodes extracted as part of the instance hierarchy. Types, and type-related nodes will not be deleted.",
                            "default": false
                        }
                    }
                }
            }
        },
        "metadata-mapping": {
            "type": "object",
            "description": "Define mappings between properties in OPC UA and CDF attributes. For example, it is quite common for variables in OPC UA to have a property named `EngineeringUnits`, which ideally should be mapped to `unit` in CDF. This property lets you do that.",
            "examples": [
                {
                    "timeseries": {
                        "EngineeringUnits": "unit",
                        "EURange": "description"
                    },
                    "assets": {
                        "Name": "name"
                    }
                }
            ],
            "unevaluatedProperties": false,
            "properties": {
                "assets": {
                    "type": "object",
                    "description": "Map metadata for assets.",
                    "patternProperties": {
                        ".*": {
                            "type": "string",
                            "description": "Target asset attribute",
                            "enum": [
                                "description",
                                "name",
                                "parentId"
                            ]
                        }
                    }
                },
                "timeseries": {
                    "type": "object",
                    "description": "Map metadata for time series.",
                    "patternProperties": {
                        ".*": {
                            "type": "string",
                            "description": "Target time series attribute",
                            "enum": [
                                "description",
                                "name",
                                "parentId",
                                "unit"
                            ]
                        }
                    }
                }
            }
        },
        "raw-node-buffer": {
            "type": "object",
            "description": "Read from CDF instead of OPC-UA when starting, to speed up start on slow servers. Requires [`extraction.data-types.expand-node-ids`](#extraction.data-types) and [`extraction.data-types.append-internal-values`](#extraction.data-types) to be set to `true`.\n\nThis should generaly be enabled along with [`metadata-targets.raw`](#cognite.metadata-targets.raw) or with no metadata targets at all.\n\nIf `browse-on-empty` is set to `true` and `metadata-targets.raw` is configured with the same database and tables the extractor will read into raw on first run, then use raw as source for later runs. The Raw database can be deleted, and it will be re-created on extractor restart.",
            "unevaluatedProperties": false,
            "required": [
                "enable",
                "database"
            ],
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Set to `true` to enable loading nodes from CDF Raw.",
                    "default": false
                },
                "database": {
                    "type": "string",
                    "description": "CDF RAW database to read from."
                },
                "assets-table": {
                    "type": "string",
                    "description": "CDF RAW table to read assets from, used for events. This is not useful if there are no custom nodes generating events in the server."
                },
                "timeseries-table": {
                    "type": "string",
                    "description": "CDF RAW table to read time series from."
                },
                "browse-on-empty": {
                    "type": "boolean",
                    "description": "Run normal browse if nothing is found when reading from CDF, either because the tables are empty, or because they do not exist. Note that nodes may be present in the CDF RAW tables. Browse will run if no _valid_ nodes are found, even if there are nodes present in RAW."
                }
            }
        },
        "delete-relationships": {
            "type": "boolean",
            "description": "If this is set to `true`, relationships deleted from the source will be hard-deleted in CDF. Relationships do not have metadata, so soft-deleting them is not possible."
        }
    }
}