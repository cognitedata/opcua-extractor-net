name: Release extractor

on:
    push:
        tags:
          - '*'
    
jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
            publish-args: ${{ steps.get-pub-args.outputs.args }}
            upload-url: ${{ steps.create_release.outputs.upload_url }}
            version: ${{ steps.get-version.outputs.version }}
        
        steps:
        - uses: actions/checkout@v2
        - name: Create Release
          uses: actions/create-release@v1
          id: create_release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: ${{ github.ref }}
            draft: false
            prerelease: false
        - id: get-pub-args
          run: echo ::set-output name=args::$(./get-build-args.sh ${GITHUB_REF#refs/tags/})
        - id: get-version
          run: echo ::set-output name=version::${GITHUB_REF#refs/tags/}
        
    build-linux:
        runs-on: ubuntu-latest
        needs: create-release
        
        steps:
        - uses: actions/checkout@v2
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
              dotnet-version: 6.0.x
        - name: Restore paket
          run: dotnet tool restore
        - name: Restore dependencies
          run: dotnet restore
        - name: Build
          run: dotnet build ExtractorLauncher/

        - name: Install release dependencies
          run: sudo apt-get install -y rpm build-essential sed
        - name: Build release binary
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/ -o linux/publish/
        - run: sh ./build-linux-installers.sh ${{ needs.create-release.outputs.version }}
        
        - name: Get RPM version
          id: rpmver
          run: echo ::set-output name=rpmver::$(echo "${{ needs.create-release.outputs.version}}" | tr - _)
        
        - name: Upload rpm installer
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./opcua-extractor-${{ steps.rpmver.outputs.rpmver }}-1.x86_64.rpm
            asset_name: opcua-extractor-${{ steps.rpmver.outputs.rpmver }}-1.x86_64.rpm
            asset_content_type: application/x-rpm
        
        - name: Upload deb installer
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./opcua-extractor_${{ needs.create-release.outputs.version }}_amd64.deb
            asset_name: opcua-extractor_${{ needs.create-release.outputs.version }}_amd64.deb
            asset_content_type: application/x-debian-package
        
    build-installer:
        runs-on: windows-2019
        needs: create-release
        
        steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - uses: actions/checkout@v2
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
              dotnet-version: 6.0.x
        - name: Restore paket
          run: dotnet tool restore
        - name: Restore dependencies
          run: dotnet restore
          
        - name: Build MSI
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} .\ExtractorLauncher\ -o extractorbuild\
          
        - name: Sign executables
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\extractorbuild\OpcuaExtractor.exe