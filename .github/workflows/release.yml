name: Release extractor

on:
    push:
        tags:
          - '*'
    
jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
            publish-args: ${{ steps.get-pub-args.outputs.args }}
            upload-url: ${{ steps.create_release.outputs.upload_url }}
            version: ${{ steps.get-version.outputs.version }}
        
        steps:
        - uses: actions/checkout@v2
        - name: Create Release
          uses: actions/create-release@v1
          id: create_release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: ${{ github.ref }}
            draft: false
            prerelease: false
        - id: get-pub-args
          run: echo ::set-output name=args::$(./get-build-args.sh ${GITHUB_REF#refs/tags/})
        - id: get-version
          run: echo ::set-output name=version::${GITHUB_REF#refs/tags/}
        
    build-linux:
        runs-on: ubuntu-latest
        needs: create-release
        
        steps:
        - uses: actions/checkout@v2
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
              dotnet-version: 6.0.x
        - name: Restore paket
          run: dotnet tool restore
        - name: Restore dependencies
          run: dotnet restore
        - name: Build
          run: dotnet build ExtractorLauncher/

        - name: Install release dependencies
          run: sudo apt-get install -y rpm build-essential sed
        - name: Build release binary
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/ -o linux/publish/
        - run: sh ./build-linux-installers.sh ${{ needs.create-release.outputs.version }}
        
        - name: Build windows release
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/
        - run: ./build-zip.sh win-x64 false ${{ needs.create-release.outputs.version }}

        - name: Build linux release
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/
        - run: ./build-zip.sh linux-x64 true ${{ needs.create-release.outputs.version }}

        - name: Build windows bridge release
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} MQTTCDFBridge/
        - run: ./build-zip-bridge.sh win-x64 false ${{ needs.create-release.outputs.version }}

        - name: Build linux bridge release
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} MQTTCDFBridge/
        - run: ./build-zip-bridge.sh linux-x64 true ${{ needs.create-release.outputs.version }}

        - name: Build windows server release
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} Server/
        - run: ./build-zip-server.sh win-x64 false ${{ needs.create-release.outputs.version }}

        - name: Build linux server release
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} Server/
        - run: ./build-zip-server.sh linux-x64 true ${{ needs.create-release.outputs.version }}

        - name: Upload windows extractor
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./opcua-extractor.win-x64.${{ needs.create-release.outputs.version }}.zip
            asset_name: opcua-extractor.win-x64.${{ needs.create-release.outputs.version }}.zip
            asset_content_type: application/zip

        - name: Upload linux extractor
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./opcua-extractor.linux-x64.${{ needs.create-release.outputs.version }}.zip
            asset_name: opcua-extractor.linux-x64.${{ needs.create-release.outputs.version }}.zip
            asset_content_type: application/zip

        - name: Upload windows bridge
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./mqtt-cdf-bridge.win-x64.${{ needs.create-release.outputs.version }}.zip
            asset_name: mqtt-cdf-bridge.win-x64.${{ needs.create-release.outputs.version }}.zip
            asset_content_type: application/zip

        - name: Upload linux bridge
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./mqtt-cdf-bridge.linux-x64.${{ needs.create-release.outputs.version }}.zip
            asset_name: mqtt-cdf-bridge.linux-x64.${{ needs.create-release.outputs.version }}.zip
            asset_content_type: application/zip

        - name: Upload windows server
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./test-server.win-x64.${{ needs.create-release.outputs.version }}.zip
            asset_name: test-server.win-x64.${{ needs.create-release.outputs.version }}.zip
            asset_content_type: application/zip

        - name: Upload linux server
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./test-server.linux-x64.${{ needs.create-release.outputs.version }}.zip
            asset_name: test-server.linux-x64.${{ needs.create-release.outputs.version }}.zip
            asset_content_type: application/zip

        - name: Get RPM version
          id: rpmver
          run: echo ::set-output name=rpmver::$(echo "${{ needs.create-release.outputs.version}}" | tr - _)

        - name: Upload rpm installer
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./opcua-extractor-${{ steps.rpmver.outputs.rpmver }}-1.x86_64.rpm
            asset_name: opcua-extractor-${{ steps.rpmver.outputs.rpmver }}-1.x86_64.rpm
            asset_content_type: application/x-rpm

        - name: Upload deb installer
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: ./opcua-extractor_${{ needs.create-release.outputs.version }}_amd64.deb
            asset_name: opcua-extractor_${{ needs.create-release.outputs.version }}_amd64.deb
            asset_content_type: application/x-debian-package

    build-installer:
        runs-on: windows-2019
        needs: create-release

        steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - uses: actions/checkout@v2
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
              dotnet-version: 6.0.x
        - name: Restore paket
          run: dotnet tool restore
        - name: Restore dependencies
          run: dotnet restore

        - name: Build Executable
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} .\ExtractorLauncher\ -o extractorbuild\

        - name: Sign executable
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\extractorbuild\OpcuaExtractor.exe

        - name: Add msbuild to path
          uses: microsoft/setup-msbuild@v1.1

        - name: Build service manager
          run: msbuild .\OpcUaServiceManager\OpcUaServiceManager.csproj /t:rebuild /p:Configuration=Release
        - run: mkdir managerbuild
        - run: xcopy OpcUaServiceManager\bin\Release managerbuild /S /Y

        - name: Sign manager
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\managerbuild\OpcUaServiceManager.exe

        - name: Build MSI
          working-directory: .\OpcUaExtractorSetup
          run: .\build.ps1 -v ${{ needs.create-release.outputs.version }} -b msbuild -d "OPC-UA Extractor" -c .\setup-config.json

        - name: Sign MSI
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\OpcUaExtractorSetup\bin\Release\OpcUaExtractorSetup.msi

        - run: mv .\OpcUaExtractorSetup\bin\Release\OpcUaExtractorSetup.msi .\OpcUaExtractorSetup-${{ needs.create-release.outputs.version }}.msi

        - name: Deploy MSI to releases
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload-url }}
            asset_path: .\OpcUaExtractorSetup-${{ needs.create-release.outputs.version }}.msi
            asset_name: OpcUaExtractorSetup-${{ needs.create-release.outputs.version }}.msi
            # Yes this is real, it makes no sense
            asset_content_type: application/msword

    build-docker:
        runs-on: ubuntu-latest
        needs: create-release

        steps:
        - uses: actions/checkout@v2
          name: Checkout

        - id: image_tags
          run: |
            echo ::set-output name=extractor::"eu.gcr.io/cognite-registry/opcua-extractor-net:${{ needs.create-release.outputs.version }}"
            echo ::set-output name=bridge::"eu.gcr.io/cognite-registry/mqtt-cdf-bridge:${{ needs.create-release.outputs.version }}"
            echo ::set-output name=desc::"$(git describe --tags --dirty) $(git log -1  --format=%ai)"

        - name: Build extractor image
          run: |
            image=$(docker build --build-arg VERSION='${{ needs.create-release.outputs.version }}' --build-arg DESCRIPTION='${{ steps.image_tags.outputs.desc }}' -f Dockerfile.build . | awk '/Successfully built/ {print $3}')
            id=$(docker create $image)
            docker cp $id:/build/deploy .
            docker rm -v $id
            docker build -t ${{ steps.image_tags.outputs.extractor }} .

        - name: Build bridge image
          run: |
            image=$(docker build --build-arg VERSION='${{ needs.create-release.outputs.version }}' --build-arg DESCRIPTION='${{ steps.image_tags.outputs.desc }}' -f Dockerfile.bridge.build . | awk '/Successfully built/ {print $3}')
            id=$(docker create $image)
            docker cp $id:/build/deploy .
            docker rm -v $id
            docker build -f Dockerfile.bridge -t ${{ steps.image_tags.outputs.extractor }} .

        - name: Push images
          run: |
            echo "Images being pushed as ${{ steps.image_tags.outputs.extractor }}, ${{ steps.image_tags.outputs.bridge }}"
            echo ${{ secrets.COGNITE_REGISTRY_KEY }} | base64 -d | docker login -u _json_key --password-stdin https://eu.gcr.io
            docker push eu.gcr.io/cognite-registry/opcua-extractor-net:latest
            docker push ${{ steps.image_tags.outputs.extractor }}
            docker push eu.gcr.io/cognite-registry/mqtt-cdf-bridge:latest
            docker push ${{ steps.image_tags.outputs.bridge }}