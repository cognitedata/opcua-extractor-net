name: Release extractor

on:
    push:
        tags:
          - '*'
    
jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
            publish-args: ${{ steps.get-pub-args.outputs.args }}
            version: ${{ steps.get-version.outputs.version }}
        
        steps:
        - uses: actions/checkout@v3
        - id: get-pub-args
          run: echo ::set-output name=args::$(./get-build-args.sh ${GITHUB_REF#refs/tags/})
        - id: get-version
          run: echo ::set-output name=version::${GITHUB_REF#refs/tags/}
        
    build-linux:
        runs-on: ubuntu-latest
        needs: create-release
        
        steps:
        - uses: actions/checkout@v3
        - name: Setup .NET
          uses: actions/setup-dotnet@v3
          with:
              dotnet-version: 7.0.x
        - name: Restore dependencies
          run: dotnet restore

        - name: Restore tools
          run: dotnet tool restore

        - name: Build
          run: dotnet build ExtractorLauncher/

        - name: Install release dependencies
          run: sudo apt-get install -y rpm build-essential sed
        - name: Build release binary
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/ -o linux/publish/
        - run: sh ./build-linux-installers.sh ${{ needs.create-release.outputs.version }}
        
        - name: Build windows release
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/
        - run: ./build-zip.sh win-x64 false ${{ needs.create-release.outputs.version }}

        - name: Build linux release
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} ExtractorLauncher/
        - run: ./build-zip.sh linux-x64 true ${{ needs.create-release.outputs.version }}

        - name: Build windows bridge release
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} MQTTCDFBridge/
        - run: ./build-zip-bridge.sh win-x64 false ${{ needs.create-release.outputs.version }}

        - name: Build linux bridge release
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} MQTTCDFBridge/
        - run: ./build-zip-bridge.sh linux-x64 true ${{ needs.create-release.outputs.version }}

        - name: Build windows server release
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} Server/
        - run: ./build-zip-server.sh win-x64 false ${{ needs.create-release.outputs.version }}

        - name: Build linux server release
          run: dotnet publish -c Release -r linux-x64 ${{ needs.create-release.outputs.publish-args }} Server/
        - run: ./build-zip-server.sh linux-x64 true ${{ needs.create-release.outputs.version }}

        - name: Get RPM version
          id: rpmver
          run: echo ::set-output name=rpmver::$(echo "${{ needs.create-release.outputs.version}}" | tr - _)

        - name: Move artifacts to separate folder
          run: |
            mkdir artifacts
            mv ./opcua-extractor.win-x64.${{ needs.create-release.outputs.version }}.zip artifacts/
            mv ./opcua-extractor.linux-x64.${{ needs.create-release.outputs.version }}.zip artifacts/
            mv ./mqtt-cdf-bridge.win-x64.${{ needs.create-release.outputs.version }}.zip artifacts/
            mv ./mqtt-cdf-bridge.linux-x64.${{ needs.create-release.outputs.version }}.zip artifacts/
            mv ./test-server.win-x64.${{ needs.create-release.outputs.version }}.zip artifacts/
            mv ./test-server.linux-x64.${{ needs.create-release.outputs.version }}.zip artifacts/
            mv ./opcua-extractor-${{ steps.rpmver.outputs.rpmver }}-1.x86_64.rpm artifacts/
            mv ./opcua-extractor_${{ needs.create-release.outputs.version }}_amd64.deb artifacts/

        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: linux-artifacts
            path: artifacts/
            retention-days: 1

    build-installer:
        runs-on: windows-2019
        needs: create-release

        steps:
        - uses: actions/checkout@v3
        - name: Setup .NET
          uses: actions/setup-dotnet@v3
          with:
              dotnet-version: 7.0.x
        - name: Restore dependencies
          run: dotnet restore

        - name: Restore tools
          run: dotnet tool restore

        - name: Build Executable
          run: dotnet publish -c Release -r win-x64 ${{ needs.create-release.outputs.publish-args }} .\ExtractorLauncher\ -o extractorbuild\

        - name: Sign executable
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\extractorbuild\OpcuaExtractor.exe

        - name: Add msbuild to path
          uses: microsoft/setup-msbuild@v1.3

        - name: Build service manager
          run: msbuild .\OpcUaServiceManager\OpcUaServiceManager.csproj /t:rebuild /p:Configuration=Release
        - run: mkdir managerbuild
        - run: xcopy OpcUaServiceManager\bin\Release managerbuild /S /Y

        - name: Sign manager
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\managerbuild\OpcUaServiceManager.exe

        - name: Build SBOM
          run: .\installer-sbom.ps1 ${{ needs.create-release.outputs.version }}

        - name: Build MSI
          working-directory: .\OpcUaExtractorSetup
          run: .\build.ps1 -v ${{ needs.create-release.outputs.version }} -b msbuild -d "OPC-UA Extractor" -c .\setup-config.json

        - name: Sign MSI
          env:
            CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
            CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
          uses: cognitedata/code-sign-action/@v1
          with:
            path-to-binary: .\OpcUaExtractorSetup\bin\Release\OpcUaExtractorSetup.msi

        - run: mv .\OpcUaExtractorSetup\bin\Release\OpcUaExtractorSetup.msi .\OpcUaExtractorSetup-${{ needs.create-release.outputs.version }}.msi

        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: installer
            path: .\OpcUaExtractorSetup-${{ needs.create-release.outputs.version }}.msi
            retention-days: 1

    upload-release:
        runs-on: ubuntu-latest
        needs: [build-linux, build-installer, create-release]

        steps:
        - uses: actions/checkout@v3
          name: Checkout

        - name: Download Linux Artifacts
          uses: actions/download-artifact@v3
          with:
            name: linux-artifacts
            path: artifacts/

        - name: Download Windows Artifact
          uses: actions/download-artifact@v3
          with:
            name: installer
            path: artifacts/

        - name: Debug
          run: |
            ls
            ls artifacts/

        - name: Get RPM version
          id: rpmver
          run: echo ::set-output name=rpmver::$(echo "${{ needs.create-release.outputs.version}}" | tr - _)

        - name: Upload to github releases
          uses: softprops/action-gh-release@v1
          with:
            files: |
              artifacts/opcua-extractor.win-x64.${{ needs.create-release.outputs.version }}.zip 
              artifacts/opcua-extractor.linux-x64.${{ needs.create-release.outputs.version }}.zip
              artifacts/mqtt-cdf-bridge.win-x64.${{ needs.create-release.outputs.version }}.zip
              artifacts/mqtt-cdf-bridge.linux-x64.${{ needs.create-release.outputs.version }}.zip
              artifacts/test-server.win-x64.${{ needs.create-release.outputs.version }}.zip
              artifacts/test-server.linux-x64.${{ needs.create-release.outputs.version }}.zip
              artifacts/opcua-extractor-${{ steps.rpmver.outputs.rpmver }}-1.x86_64.rpm
              artifacts/opcua-extractor_${{ needs.create-release.outputs.version }}_amd64.deb
              artifacts/OpcUaExtractorSetup-${{ needs.create-release.outputs.version }}.msi

        - name: Install python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'

        - name: Install extractor uploader
          env: 
            PYPI_ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_READONLY_TOKEN_USER_PUBLIC_REPOS }}
            PYPI_ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_READONLY_TOKEN_PUBLIC_REPOS }}
          run: |
            python -m pip install --upgrade pip
            pip install cognite-extractor-publisher --extra-index-url "https://${PYPI_ARTIFACTORY_USERNAME}:${PYPI_ARTIFACTORY_PASSWORD}@cognite.jfrog.io/cognite/api/pypi/snakepit/simple"

        - name: Run extractor uploader
          env:
            EXTRACTOR_DOWNLOAD_API_ADMIN_SECRET: ${{ secrets.EXTRACTOR_DOWNLOAD_ADMIN_SECRET }}
          run: publish-extractor publish --manifest manifest.yml --version ${{ needs.create-release.outputs.version }}

    build-docker:
        runs-on: ubuntu-latest
        needs: create-release

        steps:
        - uses: actions/checkout@v3
          name: Checkout

        - id: image_tags
          run: |
            echo ::set-output name=extractor::"eu.gcr.io/cognite-registry/opcua-extractor-net:${{ needs.create-release.outputs.version }}"
            echo ::set-output name=extractor_dockerhub::"cognite/opcua-extractor-net:${{ needs.create-release.outputs.version }}"
            echo ::set-output name=bridge::"eu.gcr.io/cognite-registry/mqtt-cdf-bridge:${{ needs.create-release.outputs.version }}"
            echo ::set-output name=bridge_dockerhub::"cognite/mqtt-cdf-bridge:${{ needs.create-release.outputs.version }}"
            echo ::set-output name=desc::"$(git describe --tags --dirty) $(git log -1  --format=%ai)"

        - name: Build extractor image
          run: |
            image=$(docker build --build-arg version='${{ needs.create-release.outputs.version }}' --build-arg description='${{ steps.image_tags.outputs.desc }}' -f dockerfile.build -q .)
            id=$(docker create $image)
            docker cp $id:/build/deploy .
            docker rm -v $id
            docker build -t ${{ steps.image_tags.outputs.extractor }} .
            docker tag ${{ steps.image_tags.outputs.extractor }} ${{ steps.image_tags.outputs.extractor_dockerhub }}

        - name: Build bridge image
          run: |
            image=$(docker build --build-arg VERSION='${{ needs.create-release.outputs.version }}' --build-arg DESCRIPTION='${{ steps.image_tags.outputs.desc }}' -f Dockerfile.bridge.build -q .)
            id=$(docker create $image)
            docker cp $id:/build/deploy .
            docker rm -v $id
            docker build -f Dockerfile.bridge -t ${{ steps.image_tags.outputs.bridge }} .
            docker tag ${{ steps.image_tags.outputs.bridge }} ${{ steps.image_tags.outputs.bridge_dockerhub }}

        - name: Push images
          run: |
            echo "Images being pushed as ${{ steps.image_tags.outputs.extractor }}, ${{ steps.image_tags.outputs.bridge }}"
            echo ${{ secrets.COGNITE_REGISTRY_KEY }} | base64 -d | docker login -u _json_key --password-stdin https://eu.gcr.io
            docker push ${{ steps.image_tags.outputs.extractor }}
            docker push ${{ steps.image_tags.outputs.bridge }}
        

        - name: "Log in to the Dockerhub"
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USER }}
            password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
        - name: Push images dockerhub
          run: |
            echo "Images being pushed as ${{ steps.image_tags.outputs.extractor_dockerhub }}, ${{ steps.image_tags.outputs.bridge_dockerhub }}"
            docker push ${{ steps.image_tags.outputs.extractor_dockerhub }}
            docker push ${{ steps.image_tags.outputs.bridge_dockerhub }}
